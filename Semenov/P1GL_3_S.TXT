                 Глава 3. ВВОД-ВЫВОД ДАННЫХ

                 3.1. ОПЕРАТОРЫ ВВОДА-ВЫВОДА



   Нажатие клавиши термина вызывает прерывание (в персональных ЭВМ IBM
PC  даже  два).  Коды вводимых символов поступают во входной кольцевой
буфер, откуда их забирает оператор KEY (клавиша), входящий в процедуру
EXPECT.  После  некоторой  предварительной  селекции  они заносятся во
входной буфер Форта (TIB).  Схема обработки входных кодов представлена
на рис.1 (подробнее см. гл.7).

   С некоторыми   операторами   ввода-вывода   ("."   и  др.)  вы  уже
познакомились.  Мы использовали и операторы "@." или "?" для вывода на
экран  содержимого  ячейки,  адрес  которой хранится в стеке.  Но этим
набор  операторов  ввода-вывода  не  ограничивается.   Для   упрощения
восприятия  выводимых данных желательно сопровождать их теми или иными
комментариями и сообщениями.  Такая возможность реализуется  в  рамках
структуры  " XXXXXX",  где ." - оператор начала сообщения,  после чего
необходим пробел;  XXXXXX  -  последовательность  любых  кодов  ASCII,
включая расширенный набор с кодами более 127 (недопустим только символ
" и символы с восьмеричными кодами <40);" - указатель конца сообщения,
до него или после него пробелы необязательны. Например, на обращение

      : DOBROE_UTRO ." Good morning," ;
      DOBROE_UTRO ." I'll call you later" <BK>
      [в Форт-83 .( I'll call you later) ] ЭВМ выдаст
      Good morning, I'll call you later OK
      ---- -------- ---- ---- --- ----- --
    ┌─────────────────────────┬─────────┬────────────────────────────┐
    │                         │ QUIT    │       ┌──┐    ┌─────────┐  │
    │             I     ────>─┴─────┬─┬─┤    ┌──┤IN├──┐ │  ДИСК   │  │
    │         \       / ────>─┐ KEY │ │ │    │  └──┘  │ └────╥────┘  │
    │         Кольцевой       ├─────┘ │ │    V   BLK  V      V       │
    │      -             -    │ EXPECT│ │  ┌───┐ ═╦═ ┌───────╨────┐  │
    │           буфер         ├───────┘ ├─>┤TIB >┌╨┐<  ЭКРАННЫЙ   │  │
    │         /        \      │ QUERY   ├─>┤   │ └╥┘ │   БУФЕР    │  │
    │             I           └───┬─┬───┘  └───┘  ║  └────────────┘  │
    │             ^ ВХОД          │ │             V                  │
    │  ┌──────────┴──┐           /_ _\                               │
    │  │┌───────────┐│            │ │               янав, тевирп     │
    │  ││           ││            │ │           ┌─────────────────┐  │
    │  ││  Монитор  ││        ┌───┴─┴───┐       │    ───────>     ││ │
    │  ││           ││        │ COMPILE │       └─────────────────┘V │
    │  │└───────────┘│        │    or   │            ┌───────────────┤
    │  └─────────────┘        │ EXECUTE ╞═══════<════╡   INTERPRET   │
    └─────────────────────────┴─────────┘            └───────────────┘

                   Рис. 1. Схема Форт-интерпретатора

   Или еще пример. Введем описание

      : MY_AUNT." 100-00-00" ;

где 100-00-00 - номер телефона вашей тети. Теперь всякий раз, когда вы
напечатаете команду MY_AUNT <BK>,  ЭВМ  напомнит  вам:

      100-00-00  ОК.
      --------------

   Другой пример:

      : SIGNUM 0<IF ." NEGATIVE " ELSE." POSITIVE" THEN ;

   Теперь можно не трудиться, определяя знак числа, это сделает за вас
ЭВМ.  Итак,  -10 SIGNUM <BK> NEGATIVE ОК. Рассмотрим пример, несколько
более близкий к практике.  Пусть  ранее  была  описана  переменная  A,
введем слово с именем A_VALUE:

      : A_VALUE ." A = "A ? ;

   В последующей программе обращение A_VALUE будет информировать вас о
текущем значении переменной A, например A_VALUE <BK> A = 77.
                                                     ------
   Для вывода на экран символа,  соответствующего коду в стеке, служит
оператор   EMIT  (отобразить  символ).  Ниже  приводятся  примеры  его
использования:

                         47 EMIT <BK> / OK

                         43 EMIT <BK> + OK

                         65 EMIT <BK> A OK

                          7 EMIT <BK>   OK

   Для тех,  кто  не  сидит за пультом ЭВМ,  поясняю,  что в последнем
примере ЭВМ выдает звуковой сигнал. Оператором EMIT можно пользоваться
также,  если  вы  забыли,  какому из кодов ASCII соответствует тот или
иной код в интересующей вас системе счисления.

   Еще одним  весьма  употребимым  оператором  является  KEY,  который
ожидает  ввода,  берет  из  входного буфера код ASCII и посылает его в
стек. Если вы забыли код * или A, не надо искать таблицу соответствия,
просто выполните команду

           KEY <ВК>                 или     KEY <ВК>

           * . <ВК>                         A . <ВК>

           42 OK                            65 OK

и узнаете,  что  код  ASCII  для  *  равен  42,  а  A равен 65.  Здесь
предполагается, что система счисления десятичная.

   В версии FIG-FORTH имеется  оператор  ?TERM  (ввод  без  ожидания),
который  идентичен  KEY,  но  он  ни при каких обстоятельствах не ждет
ввода символа с терминала.  Если к моменту исполнения ?TERM во входном
буфере что-то есть,  то код одного символа будет передан в стек,  если
же нет,  управление будет передано следующему за ?TERM оператору. Этот
оператор  можно  с  успехом  использовать и для выхода из бесконечного
цикла:

      BEGIN XXX ?TERM ASCII Z = UNTIL

   Выход из цикла произойдет, если нажать клавишу Z.

   Набор операторов вывода чисел на  экран  (печать)  можно  пополнить
словами  U.,  D.,  .R и U.R.  Оператор U.  служит для распечатки чисел
одинарной длины без знака (знаковый бит  рассматривается  как  обычный
двоичный  разряд  числа).  Оператор D.  выводит на экран числа двойной
длины, например

      13 0 D. <ВК> 13 OK
      0 3 D. <ВК> 196608 OK

   Операторы .R  и  U.R  служат  для  табличного  представления чисел.
Обращение:  N k .R и N  k  U.R,  где  N  -  число,  которое  мы  хотим
отпечатать,  может  быть записано в стек и в результате предшествующих
вычислений;  k - число знакомест,  выделенных  на  экране  для  печати
числа.  Младшая  цифра  числа  помещается в самое правое из выделенных
знакомест. Например, опишем слово SMPL:

      : SMPL 12 9 DO 1 5 .R CR LOOP;

исполнив его: SMPL <ВК>, получим:

       9
       -
      10
      --
      11 OK
      -- --

   Здесь младшая  цифра занимает всегда 5-ю позицию (k=5).  Назначение
оператора U.R то же, что и .R, но для целых чисел без знака.

   Оператор EXPECT    (ожидание    ввода)     служит     для     ввода
последовательности кодов с терминала. Например:

                    0 VARIABLE XX 24 ALLOT

                    XX 16 EXPECT

		    или

		    PAD 120 EXPECT

   Такая процедура  воспримет  16  или  120  символов  с  клавиатуры и
запишет их,  начиная с адреса XX или PAD. Если среди вводимых символов
встретится код <ВК>, ввод будет немедленно прерван.

   Для вывода   последовательностей  символов  на  экран  используется
оператор  TYPE  (распечатать).  Стек  при  обращении  к  TYPE   должен
содержать  адрес,  начиная  с  которого  надо  начать  вывод,  и число
выводимых символов (последнее лежит наверху стека). Например:

      0 VARIABLE HI 12 ALLOT
      : GREAT HI 12 BLANKS      ( заполнение массива HI пробелами)
      CR ." ENTER>"                         ( приглашение к вводу)
      HI 12 EXPECT ;                  ( запись введенной строки в
                                        массив HI)

   Предположим, что произошел диалог:

		    GREAT <ВК>
		    ENTER> HALLO <ВК>

   Исполнение позднее команды HI 8 TYPE <ВК> вызовет отклик HALLO ОК.

   Форт имеет свой входной буфер,  адрес которого хранится в системной
переменной по имени TIB (Terminal Input Buffer).  Ввод  в  этот  буфер
осуществляется оператором QUERY (запрос) базового словаря:

      : QUERY TIB @ 120 EXPECT 0 IN ! CR;

где IN - системная переменная,  которая является указателем в пределах
входного буфера и отмечает байт,  подлежащий обработке  следующим;  CR
(возврат  каретки)  -  команда  базового  словаря,  которая  выполняет
переход на начало  следующей  строки  для  терминала  или  печатающего
устройства.


                    3.2. СТРУКТУРА БУФЕРОВ


   Все операции    обмена    (при    редактировании    или   загрузке)
осуществляются через буферные зоны памяти,  каждая из которых содержит
1024 байт.  Число этих зон может, варьироваться от версии к версии и в
зависимости от емкости памяти и требований  к  скорости  обмена  может
быть  от  1  до  6.  Эти  зоны  в памяти и на диске называются в Форте
экранами.

   Рассмотрим трехбуферный вариант системы (рис.2).  Ячейка  с  именем
"Номер"  содержит  номер  экрана,  записанный  в данный буфер (или для
которого буфер приготовлен). Знаковый бит этого кода - флаг "спасения"
-  устанавливается в единичное состояние оператором UPDATE (изменить),
сигнализируя о необходимости его записи на диск.  Нулевой код в  конце
буфера  служит  для  прерывания  интерпретации,  если  в  процессе его
выполнения  не  встретилось  других  команд,  выполняющих  аналогичную
функцию.

   При обращении к тому или иному экрану система проверяет, есть ли он
уже в буфере.  Если его тем нет,  то один из буферов  освобождается  и
туда  считывается  требуемый  экран.  Освобождается  всегда тот буфер,
который  был  занят  раньше   остальных.   В   процессе   освобождения
контролируется  флаг  "спасения"  в  ячейке  номера экрана.  Если флаг
единичный,  этот буфер сначала записывается на  диск  (в  FIG-FORTH  в
виртуальной  файл FORTH.DAT,  в пределах которого экраны упорядочены в
соответствии с  номерами),  и  только  затем  на  его  место  в  буфер
производится запись.

   Для чтения  экрана  с  диска  в  буфер  используется оператор BLOCK
(блок).  При обращении к  BLOCK  необходимо  указать  номер  читаемого
экрана (блока).  В результате выполнения команды соответствующий экран
(если он еще не в буфере) будет занесен в буфер,  а в  стеке  окажется
адрес   первого  байта  этого  буфера  (здесь  имеется  в  виду  байт,
расположенный сразу за номером экрана).  Так,  чтобы в буфере оказался
экран 1 нужно выдать команду 1 BLOCK.

               ┌───────┐  ┌────────────────────────────────┐  ┌─────┐
      FIRST -> │ НОМЕР │  │            1024 байт           │  │  0  │
               └───────┘  └────────────────────────────────┘  └─────┘

	       ┌───────┐  ┌────────────────────────────────┐  ┌─────┐
	       │ НОМЕР │  │            1024 байт           │  │  0  │
	       └───────┘  └────────────────────────────────┘  └─────┘

	       ┌───────┐  ┌────────────────────────────────┐  ┌─────┐
      LIMIT -> │ НОМЕР │  │            1024 байт           │  │  0  │
	       └───────┘  └────────────────────────────────┘  └─────┘

                  Рис. 2. Схема размещения экранных буферов

   Запись на диск всех буферов, имеющих флаг "спасения", происходит по
команде FLUSH (сохранить).  Примером ее  использования  может  служить
оператор n m COPY, который переносит экран n на место экрана m:

   : COPY SWAP   ( в стеке m n )
          BLOCK  (         m и адрес первого байта буфера,
			   куда считан экран с номером n)
          2 -    (         m и адрес ячейки, где лежит номер
			   экрана, хранящегося в буфере)
          !      ( очистка стека, номер экрана n заменен на m)
          UPDATE                  (установка флага "спасения")
          FLUSH ;                            ( запись на диск)

   Из комментариев видно,  что никакого переноса данных в  оперативной
памяти  не  происходит,  а  происходит  только  смена  номера  экрана,
установка флага "спасения" и  собственно  запись  буфера  на  диск  на
место,  предназначенное для экрана m.  Например,  по команде 7 10 COPY
<ВК> OK содержимое экрана 7 будет перенесено на экран 10. Текст экрана
10  будет  утрачен,  а на диске будут две копии экрана 7 (в 7-м и 10-м
блоках).

   Буферные зоны  памяти  можно  использовать  и  для  других   целей.
Резервирование   буферов   производит  оператор  BUFFER  (буфер),  при
обращении  к  которому  нужно  указать  номер  экрана,  для   которого
выделяется буфер (например,  10 BUFFER).  При исполнении BUFFER в стек
записывается  адрес  первого  байта  зарезервированного  буфера.  Если
свободного   буфера   нет,  занимается  очередной,  при  необходимости
автоматически производится запись занимаемого буфера на диск. Никакого
чтения   информации   с   диска   в   процессе  выполнения  BUFFER  не
производится.  Если хранение буфера на  диске  не  планируется,  номер
экрана,  присваиваемый ему,  может быть любым. Главное - не установить
по ошибке флаг "спасения": это может привести к замене на диске текста
соответствующего экрана.  Пример такого использования оператора BUFFER
можно найти в тексте экранного редактора EDT (см. приложение 1).

   Полная очистка  всех  буферов  без  записи  на  диск  происходит по
команде EMPTY-BUFFER (очистить буферы).

   Одна из часто употребимых команд Форта n LIST (листинг):

   : LIST DECIMAL CR DUP                        ( в стеке n n )
          SCR !        ( запись в SCR номера выводимого экрана;
                         в стеке n)
          ." S# "       ( отображение номера выводимого экрана)
          16 0 DO          ( начало цикла отображения 16 строк)
          CR I 3 .R SPACE              ( печать номера строки )
          I SCR @ .LINE             ( распечатка текста строки)
          LOOP CR ;

   Эта команда читает содержимое экрана n в буфер и отображает его  на
экране.  При  попытке исполнить команду LIST для экрана,  где хранится
числовая (а не текстовая) информация,  ничего хорошего не  произойдет.
Мало того, что на экран будет выведена непонятная череда символов, сам
терминал может переключиться в другой режим,  если в выводимом  тексте
окажутся     коды,     имитирующие     соответствующую     управляющую
последовательность. Из текста видно, что LIST устанавливает десятичную
систему    представления    чисел,   что   исключает   неоднозначность
интерпретации   текста.   Но    "старая"    система    счисления    не
восстанавливается,  если  ранее  работала другая система,  и это может
создать трудности.

   Так же как и другие операции ввода-вывода,  обмен с  диском  весьма
специфичен  для  каждого  типа ЭВМ.  Но операторы LIST,  LOAD,  BLOCK,
.LINE,  INDEX и другие являются стандартными для многих версий Форта и
ЭВМ.  Но  есть  операторы,  без  которых нельзя реализовать ни одну из
названных процедур. Потребность в них ощущается при написании программ
для  нестандартного  ввода-вывода  со  стандартного или нестандартного
внешнего устройства (например, магнитофона).

   Существующие Форт-стандарты не касаются этой деликатной сферы. Один
оператор,  не  являясь  стандартным,  встречается  в различных версиях
Форта - это R/W.  В случае работы с диском считывает или записывает  1
Кбайт.  Обращение:  ADR  BL#  FLG  R/W,  где ADR - адрес памяти,  куда
(откуда) производится чтение (запись); BL# - номер экрана (блока); FLG
-  флаг  "чтение-запись"  (FLG  =  1 для чтения,  FLG = 0 для записи).
Возможны модификации, где в качестве параметра указывается код (номер)
внешнего  устройства,  участвующего в операции обмена.  Стандартизация
операторов такого типа - актуальнейшая проблема,  особенно в  связи  с
развитием средств работы с файлами.

   При оформлении  выдачи  текстов  на экран необходимо позаботиться о
размещении отдельных его частей. Для этого полезным инструментом могут
служить операторы SPACE (пробел) и SPACES, являющиеся резидентными для
базового словаря в большинстве версий Форта.  Первый перемещает курсор
терминала  на  одну  позицию  вправо,  а  второй  - на n позиций.  Эти
операторы можно описать следующим образом:

      : SPACE 32 (код пробела) EMIT;
      : SPACES -DUP IF 0 DO SPACE LOOP THEN ;

где операторы  -DUP  IF...THEN  введены  на  случай нулевого аргумента
(если гарантируется неравенство аргумента нулю,  их  можно  опустить).
Например, по команде CR 50 SPACES." FORTH" <BK> будет отпечатано слово
FORTH на правом краю экрана.  Принципиальное отличие операторов BLANKS
(BLANK в Форт-83) и SPACES заключается в том, что BLANKS засылает коды
пробелов в память,  a SPACES  -  на  вход  терминала  или  печатающего
устройства.

   Программист сам  при необходимости может описать слово TAB (команда
табуляции):

      : TAB 9 EMIT;

может ввести свою схему табуляции и позиционирования курсора,  но  для
этого уже надо познакомиться с описанием терминала.

   Текст из  экранного  или  входного  буферов берется интерпретатором
порциями (словами).  Разрешенным разделителем слов  в  Форте  является
пробел    (иногда    и   код   <ВК>   или   TAB).   Словом   считается
последовательность   символов,   начинающаяся    после    пробела    и
завершающаяся пробелом или другим разрешенным разделителем.  Выделение
слов производится оператором WORD (слово).  Обращение к  WORD  требует
наличия  в  стеке  символа,  который  используется  оператором  WORD в
качестве разграничителя.  Обычно это код  пробела.  В  начале  входной
последовательности  может  быть  любое  число пробелов,  все они будут
проигнорированы.  Оператор WORD заносит последовательность символов  в
память,   начиная   с  адреса,  указанного  оператором  HERE  (здесь).
Системный оператор HERE выдает в стек адрес  первой  свободной  ячейки
памяти,  выделенной  под словарь к моменту исполнения этой команды.  В
первом байте будет записано число байт в слове. В разных версиях Форта
оператор WORD работает по-разному: в одних выдает в стек адрес памяти,
куда записано слово,  в других - нет. Поэтому, прежде чем пользоваться
им, прочтите соответствующее описание.

   Если использовать  обращение  1  WORD,  то,  начиная с адреса HERE,
будет записано содержимое всего входного  или  экранного  буфера.  Это
будет  вызвано  тем,  что  код  1 не может быть введен с клавиатуры и,
следовательно,  не может встретиться среди вводимых символов.  Команда
'51  WORD  ('51  -  восьмеричный  код  символа  ")")  используется для
"обхода" комментариев,  а '42 WORD - для выделения строки в  структуре
."  XXXXX"  ('42  -  код  двойных  кавычек).  Тип буфера,  из которого
извлечет  оператор  WORD  очередное  слово,   определяется   системной
переменной  BLK,  равной  0  для  входного  буфера  и  номеру экрана в
противном  случае.  Смещение  относительно  начала   буфера   задается
системной переменной IN, которая корректируется при каждом обращении к
WORD.

   Если мы хотим распечатать  слово,  выделенное  оператором  WORD,  с
помощью  оператора TYPE,  нам необходимо поместить в стек адрес HERE+1
(это адрес первого байта слова) и число символов в  слове  (HERE  C@).
Запись  этих  чисел  в  стек  производит оператор COUNT (счет),  также
содержащийся в базовом словаре:

      : COUNT DUP 1+ SWAP C@ ;

   Обращение: HERE COUNT TYPE.

   Многие операции   выдачи   результатов   и   сообщений   на   экран
производятся   через   специальный   буфер,   адрес   которого  смещен
относительно HERE.  В базовом словаре имеется  оператор  PAD,  который
выдает в стек адрес начала этого буфера:

      : PAD HERE 68 + ;

   Другим важным буфером является входной. Адрес его начала хранится в
системной переменной TIB (см. описание QUERY).

   Сводные данные   по   процедурам,   рассмотренным   в  этой  главе,
содержатся в табл.4 - 8.

Таблица 4. Операторы печати чисел
----------------------------------------------------------------------
Имя        Состояние стека        Версия     Функция
----------------------------------------------------------------------
U.R        u ширина --> -         9, 3, М    Печатает число одинарной
				  	     длины без знака так, что
				  	     младшая цифра занимает
				  	     самое правое положение
				  	     в выделенном поле,
				  	     заданном числом
				  	     "ширина"

.R         n ширина --> -         9, 3, F    То же, что и U.R, но для
                                             чисел со знаком

S.         - --> -                           Печатает верхнее число в
                                             стеке, не меняя
                                             значения указателя стека

О.         - --> -                           То же что и S., но в
                                             восьмеричной системе
                                             счисления (значение
                                             BASE восстанавливается)

D.R        d ширина --> -         9, 3, F    Печатает числа двойной
                                             длины со знаком. Младшая
                                             цифра занимает самое
                                             правое положение в поле,
                                             размер которого определен
                                             числом "ширина"

PAGE       d ширина --> -         9, 3, М    Очищает экран и
                                             устанавливает курсор в
                                             верхнее левое положение

HOME       - --> -                9, 3, М    Устанавливает курсор
                                             в верхнее левое положение

П р и м е ч а н и е. 9 и 3 - стандарты Форт-79 и Форт-83, М - MMFORTH,
F - FIG - FORTH.
----------------------------------------------------------------------


Таблица 5. Операторы отображения информации на экране
----------------------------------------------------------------------
Имя        Состояние стека        Версия     Функция
----------------------------------------------------------------------
.          n --> -                9, 3, F, G Удаляет число из стека,
                                             преобразует и отображает
                                             на экране

?          n --> -                9, F       Удаляет число из стека и
                                             отображает содержимое
                                             ячейки, адрес которой
                                             равен этому числу, на
                                             экране

U.         u --> -                9, 3, F    Тоже что и ".", но код в
                                             стеке рассматривается
                                             как число без знака

." XXXX"   - --> -                9, 3, F, G Печатает строку XXXX на
PRINT"XX"                                    экране. Код " завершает
                                             строку

EMIT       c --> -                9, 3, F    Отображает на экране
                                             символ, код которого
                                             находится в стеке

CR         - --> -                9, 3, F    Посылает коды <ВК> или
					     <ПС> на выходное
                                             устройство

SPACE      - --> -                9, 3, F    Выдает код пробела на
                                             экран

SPACES     n --> -                9, 3, F    Выдает n кодов пробела
                                             на экран
HTAB                              G

П р и м е ч а н и е . см. примечание к табл.1 и 4.
----------------------------------------------------------------------


Таблица 6. Операторы для работы с экранами
----------------------------------------------------------------------
Имя        Состояние стека        Версия     Функция
----------------------------------------------------------------------
BLOCK      u --> адр              9, 3, F    Записывает в стек адрес
					     первого байта в блоке с
                                             номером u. Если блок не
                                             находится в памяти, он
                                             переносится с носителя в
                                             буфер, который был занят
                                             блоком, вызванным в
                                             память раньше других.
                                             Если блок, занимавший
                                             буфер, был ранее изменен
                                             (UPDATE), то этот блок
                                             сначала записывается на
                                             диск, и только затем на
                                             его место будет занесен
                                             новый блок

EMPTY-BUFFERS  - --> -             9, 3, F   Помечает все блоки как
                                             пустые, в результате даже
                                             измененные блоки не будут
                                             сохранены

UPDATE         - --> -             F         Устанавливает в буфере
                                             флаг "спасения"

FLUSH          - --> -             F         Записывает все измененные
SAVE-BUFFERS                       9, 3      экраны на диск

BUFFER         u --> адр           9, 3, F   Резервирует блок в
                                             памяти, приписывает ему
                                             номер u, но никакого
                                             чтения с носителя не
                                             производится

-TRAILING      адр n1 --> адр n2   9, 3, F   Преобразует число
                                             символов n1 в строке,
                                             начинающейся с адреса
                                             "адр", в число n2, не
                                             включающее число
                                             пробелов, которые имеются
                                             в конце строки. Адрес
                                             "адр" остается неизменным.

П р и м е ч а н и е . см. примечание к табл.4.
----------------------------------------------------------------------


Таблица 7. Операторы ввода-вывода
----------------------------------------------------------------------
Имя        Состояние стека        Версия     Функция
----------------------------------------------------------------------
KEY        - --> s                9, 3, F    Ожидая ввода символа с
                                             клавиатуры, при его вводе
                                             посылая соответствующий
                                             код в стек

?KEY       - --> с                М          Если во входном буфере
?TERM                             F          есть хотя бы один символ,
                                             его код будет записан в
                                             стек, если же нет,
                                             исполнение программы
                                             продолжаяся без ожидания
                                             нажатия клавиши

EXPECT     адр u --> -            9, 3, F    Ожидает ввода символов
                                             или кода <ВК> с терминала
                                             и запоминая их, начиная с
                                             адреса "адр"

QUERY      - --> -                9, 3, F    Осуществляет ввод строки
                                             символов с клавиатуры.
                                             Ввод прекращается, если
                                             нажата клавиша <ВК> или
                                             заполнен входной буфер

TYPE       адр u --> -            9, 3, 7    Передает u символов
                                             начиная с адреса "адр" на
                                             выходное внешнее
                                             устройство

Y/N        - --> -                М          Отображает на экране
                                             (Y/N)?, ждя ввода Y или
                                             N. Когда соответствующая
                                             буква введена, в стек
                                             заносится флаг 0 для Y и
                                             1 для N

MOVE       адр1 адр 2 u -         9, 3, F    Копирует область памяти
                                             длиной u ячейка за
                                             ячейкой начиная с адр1 и
                                             записывает ее начиная с
                                             адр2

П р и м е ч а н и е . см. примечание к табл.4.
----------------------------------------------------------------------


Таблица 8. Управляющие операторы
----------------------------------------------------------------------
Имя        Состояние стека       Версия     Функция
----------------------------------------------------------------------
<CMOVE     адр1 адр2 u --> -     9, 3       Копирует область памяти
CMOVE>                           F          размером u байт начиная с
                                            адр1 и записывая ее
                                            начиная с адр2.
                                            Копирование производится с
                                            конца последовательности к
                                            началу

CMOVE      адр1 адр2 u --> -     9, 3, F    Копирует побайтно область
                                            памяти размером u байт
                                            начиная с адр1 и
                                            записывает ее начиная с
                                            адр2

DECIMAL    - --> -               9, 3, F    Устанавливает десятичную
                                            систему счисления

OCTAL      - --> -               9, 3, F, М Устанавливает восьмеричную
                                            систему счисления

HEX        - -->                 9, 3, F, М Устанавливает
                                            шестнадцатеричную систему
                                            счисления

LIST       n --> -               9, 3, F    Распечатывает экран с
                                            номером n

LOAD       n --> -               9, 3, F    Загружает экран с номером
					    n (компилирует или
                                            исполняет)

-->        - --> -               9, 3, F    Дает команду немедленно
                                            приступить к интерпретации
                                            следующего по порядку
                                            экрана

COPY       n m --> -             M, F       Копирует экран n на экран
                                            m

WIPE       - --> -                          Заполняет экран кодами
                                            пробелов. Используется в
                                            контексте EDITOR

П р и м е ч а н и е . см. примечание к табл.4.
----------------------------------------------------------------------

   Упражнение 1.
   Опишите оператор * LINE,  который отображает на экране (или печати)
любую строку L экрана S. Обращение: S L * LINE.

   Р е ш е н и е.

      : *LINE 64 * SWAP BLOCK + 64 TYPE ,

   Упражнение 2.
   Опишите слово, которое сформирует на экране рамку размером 25 x 80.
Тип   символов,   образующих   рамку,  должен  задаваться  в  качестве
параметра.

   Упражнение 3.
   Заставьте ЭВМ  воспроизвести  ваше  имя  азбукой  Морзе,  используя
звуковой сигнал (7 EMIT).
