                     Глава 9. ВЕРСИИ ФОРТА


   Существует целое  семейство  Форт-интерпретаторов  для самых разных
машин,  причем большая часть для персональных ЭВМ.  Многие  из  них  в
своем  наборе  слов  отклоняются  от  известных стандартов.  Некоторые
отличаются заметно,  другие имеют несколько слов сходного  назначения,
но разного наименования (например, WORDS и VLIST), существуют и такие,
которые  идентичны  версиям  FIG-FORTH  или  Форт-79,   но   дополнены
специальными  операторами,  например  для работы с графикой в реальном
масштабе времени.  Наибольшее распространение  имеют  версии  Форт-79,
Форт-83  и  FIG-FORTH,  хотя существуют и другие (MMSFORTH,  MVPFORTH,
F83,  HS/FORTH, Полифорт и т.д.). Отмечу ряд отличий Форт-79 и Форт-83
(FIG-FORTH  довольно  близок  к  Форт-79).  В  Форт-79  числа  в стеке
нумеруются начиная с 1, а в Форт-83 - с нуля, поэтому команда 1 PICK в
первом случае эквивалентна DUP,  а во втором - OVER. Имеются отличия в
контроле завершения циклов DO...LOOP,  способе округления частного при
делении,  диагностике ошибок, форматах представления чисел операторами
.R,  D.R и т.д.  Отличаются ограничения,  накладываемые на число  слов
(байт), которые пересылаются операторами MOVE (CMOVE или <CMOVE). Если
в вашей версии отсутствуют те или иные слова,  вы без  большого  труда
можете  ее  дополнить.  Проблемы  возникают  при адаптации библиотек и
пользовательских программ,  написанных  в  рамках  "чужого"  стандарта
из-за  слов,  которые имеют идентичные имена,  но принципиально разные
функции. Назовем лишь наиболее важные.

   Оператор '(апостроф) <name> в  Форт-79  выдает  в  стек  PFA  слова
<name>,  а  Форт-83  -  CFA.  Ряд  слов имеют различия в поведении при
компиляции и исполнении.  Так,  " XXX" в  Форт-79  применимо  как  при
компиляции, так и при исполнении, в Форт-83 только при компиляции (для
Форт-83 см.также .( XXX) ).  Оператор EXPECT в Форт-79 заносит в конец
строки два нулевых байта, а Форт-83 заменяет <CR> пробелом. Совершенно
по-разному работает слово FIND.  В Форт-79 обращение к нему имеет вид:
FIND  <name>,  а  стек  преобразуется  как ( --> адрес (или 0 в случае
неудачного поиска)).  В Форт-83 схема преобразования стека  имеет  вид
(адр1  -->  адр2 n),  где адр1 - адрес счетной строки,  содержащей имя
искомого слова; адр2 - адрес этого слова в словаре; n= -1 при успешном
поиске для обычного слова,  n=1 для слов немедленного исполнения.  При
неудачном поиске адр1=адр2 и n=0.  (Более детальное описание  читатель
найдет в текстах стандартов или в книге [14].)

   Причины этих различий отчасти в сильном отличии наборов команд ЭВМ,
на которых реализованы эти интерпретаторы (например,  фирм DEC и IBM),
отчасти   в   особенностях   их   операционных  систем  и  организации
периферийного оборудования.  Немалый вклад в это разнообразие вносится
также простотой написания и модификации Форт-интерпретаторов. Проблемы
совместимости весьма остры при написании программ ввода-вывода.

   Персональные ЭВМ фирмы  IBM  (отечественный  аналог  ЕС1841)  имеют
дисплей,   функциональная  часть  клавиатуры  которого  отличается  от
известных терминалов фирмы DEC (ЭВМ типа СМ и "Электроника-85"). Кроме
того,  командные  клавиши  их  дисплеев формируют принципиально другие
коды.  Работа  функциональной  клавиатуры  ЭВМ  типа  СМ  основана  на
применении ESC-последовательностей (строк кодов,  начинающихся с числа
27,  различной длины),  а IBM PC использует однородную  систему  кодов
(нажатие любой клавиши передает на вход ЭВМ два байта информации). Еще
значительнее различие при работе с графикой. Перечисление этих отличий
можно было бы и продолжить.  К счастью, имеется возможность некоторыми
ухищрениями  сделать  эти  различия  малозаметными   для   прикладного
программиста.  Разумеется,  отличие в клавиатуре неустранимо,  и здесь
приходится рассчитывать на терпение и быструю адаптацию пользователя.

   При разработке экранного Форт-редактора программист сталкивается  с
дилеммой:  стремиться  ли  к  максимальной  совместимости  со  старыми
версиями или обеспечить совпадение с функциями штатных редакторов  для
IBM  PC  (например,  EDT).  Автор  пошел по второму пути,  в частности
использовал для смены направления движения курсора клавиши <4> и  <5>,
а для непосредственного перемещения курсора клавиши F5,  F7,  F8,  F9.
При реализации  экранного  редактора  для  персональной  ЭВМ  пришлось
столкнуться с тем, что в нормальном режиме клавиша <5> не дает отклика
(не передает каких-либо кодов при нажатии).  Здесь возможно  несколько
решений,    использовано    временное   переключение   вспомогательной
клавиатуры в числовой режим,  для чего служит  байт  417H  на  нулевой
странице  памяти  ЭВМ.  В  версии  Форта  для  IBM  PC можно встретить
операторы,  схожие по функции с KEY,  но выдающие в  стек  оба  байта,
которые   характеризуют   нажатую  клавишу.  Почти  неизбежны  отличия
вариантов Форта,  использующих  область  памяти  более  64  Кбайт  для
16-разрядных ячеек памяти,  так как стандартов на страничную адресацию
(сегментацию) в Форте также пока не существует.

   Имеются версии Форта,  где для  редактирования  виртуальных  файлов
типа    FORTH.DAT    используются   стандартные   экранные   редакторы
операционной  системы.  Эти  варианты  могут  работать   с   текстами,
содержащими символы <CR> (возврат каретки). Персональные ЭВМ благодаря
использованию блоков  управления  файлами  (FCB)  позволяют  применять
практически  любое  число  виртуальных  файлов  прямого  доступа,  что
затруднено для микроэвм семейства ДВК  и  СМ,  где  для  Форта  обычно
доступно не более двух виртуальных файлов.

   Многие Форт-интерпретаторы  имеют модульную структуру и практически
все написаны на Ассемблере.  Каждый модуль выполняет  строго  заданную
функцию, поэтому перенос интерпретатора с одной ЭВМ на другую даже при
сильном отличии их наборов команд,  структуры  памяти  и  операционных
систем большого труда не составляет.  Конечно, знание ассемблеров и ОС
ЭВМ  при  этом  совершенно  необходимо.  С  этой  точки  зрения   Форт
привлекателен   при   написании   математического   обеспечения  вновь
создаваемых оригинальных микропроцессоров, ведь для Форта даже наличие
операционной  системы  не  обязательно.  В  этой сфере применения Форт
конкурирует с системой UNIX [24].

   Наметилась тенденция   к   стандартизации   некоторых   графических
процедур  [19],  впрочем  эта  проблема выходит за рамки Форта и носит
межязыковый характер.

   В последнее   время   просматриваются   тенденции    по    созданию
процессоров,  ориентированных на тот или иной язык (Фортран, Си, Ада и
т.д.).  Коснулась эта тенденция  и  языка  Форт.  Система  Форт  легко
адаптируется к аппаратной реализации, ведь стековые структуры - весьма
характерные устройства современных ЭВМ и  микропроцессоров.  Работа  с
аппаратным  стеком  обеспечивает  достаточно  высокое  быстродействие;
исключается   обращение   к   оперативной   памяти.   Если   аппаратно
осуществлять  переход  от  одной  Форт-процедуры  к  другой,  а  также
применить схемную реализацию стека  возвратов,  можно  обеспечить  еще
большую  скорость  выполнения  операций.  Форт-процессор может успешно
использовать RISC-архитектуру  (ЭВМ  с  сокращенным  набором  команд),
получившую   широкое  распространение  в  ЭВМ  новых  поколений  [41].
Форт-процессор,  созданный фирмой Silicon Composers (США) в  1986  г.,
это   одноплатная   ЭВМ   PC400,   построенная  на  базе  16-разрядной
интегральной  схемы  NC400  (компания  NOVIX  Inc.,   Купертино,   шт.
Калифорния),  непосредственно  выполняет  инструкции  языка Форт [40],
обеспечивая  быстродействие  10  млн.  опер./с.  Компания   VME   Inc.
выпустила  плату,  в  которой объединены Форт-процессор и двухпортовая
статическая   память   емкостью   128   Кбайт.   Плата    обеспечивает
производительность в 5-20 раз больше,  чем Motorola 68020, Intel 80386
и VAX 11/780.  Разработчик языка  Форт  Ч.МУР  создал  на  базе  новой
микросхемы  NC400 графическую плату,  способную переключаться с одного
изображения на другое в пределах одного кадра.

   Основное направление  применения   Форт-процессора   -   экспертные
системы  реального  времени,  где  система  управляет процессом,  а не
просто дает советы,  а также системы искусственного интеллекта.  Такая
система уже создана компанией FORTH Inc.(Гермоза-Бич, шт. Калифорния).
Существуют   Форт-сопроцессоры,   которые   можно    использовать    в
персональной ЭВМ,  повышая ее производительность. Рассматриваются пути
адаптации PolyFORTH  [15]  для  аппаратного  Форт-процессора.  Созданы
трансляторы  с  языков  Си  и  Пролог  для  работы с Форт-процессором.
Ведутся такие работы и в СССР (в  Эстонии)  [47],  там  также  созданы
образцы Форт-процессоров.



                 9.1. АВТОНОМНАЯ ВЕРСИЯ ФОРТА


   Так как Форт имеет многие черты операционной системы,  возможно его
автономное  использование.  Но  для  этого  нужно,  чтобы  в  процессе
автоматической загрузки системы с магнитного носителя  в  память  была
перенесена программа загрузки Форт.  Для этого она должна быть заранее
записана.  Кроме того,  двоичный образ словаря должен быть записан  на
диск, это можно выполнить с помощью оператора BILOAD:

      BILOAD:

      : BILOAD: DUP R# ! DO I R# @ - 1024 * ( откуда)
			    I BLOCK ( куда) 1024 CMOVE UPDATE
                         LOOP ( завершение переноса) FLUSH ;

   Обращение: М  N BILOAD,  где M - номер конечного экрана;  N - номер
первого экрана,  куда записывается двоичный образ  словаря.  Программы
первичной  и вторичной загрузки должны быть написаны в машинных кодах,
для чего следует воспользоваться Форт-ассемблером. Программа первичной
загрузки   записывается   в   зону  носителя,  определенную  начальным
загрузчиком.  Программа вторичной загрузки записывается туда  же,  где
хранится  двоичный  образ  Форта.  Если выполнить эти условия,  то при
включении  ЭВМ  Форт  будет   загружен   автоматически   без   участия
операционной системы.

   Автономная версия  Форта  особенно  эффективна  на  микроэвм  малых
конфигураций,  где емкость дисков невелика.  В таких ЭВМ  операционная
система  занимает один диск практически целиком.  При работе с языками
высокого уровня,  например Фортраном, на диске почти не остается места
для  программ пользователя.  Автономная версия Форта занимает на диске
не  более  8  Кбайт,  для  Форт-библиотеки  требуется  еще   несколько
килобайт,  для  Форт-ассемблера  -  5  Кбайт,  для библиотеки работы с
числами с плавающей точкой 4-5 Кбайт,  для экранного редактора 4 Кбайт
и  т.д.  Итого,  системными  Форт-программами на диске занято менее 30
Кбайт,  остальное пространство остается  для  прикладных  библиотек  и
программ   пользователя.   Ни  одна  другая  операционная  система  не
предоставит такой возможности.

   Автономная версия  Форта  зависит  от  особенностей   периферийного
оборудования,  поэтому  неизбежно  возникают трудности при ее переносе
даже на ЭВМ с  совместимым  набором  команд,  но  другим  контроллером
магнитного диска.  Характерной особенностью автономной версии является
и то, что диск для Форта представляет собой однородную среду, разбитую
на  зоны  по 1 Кбайт (экраны).  Оглавление диска не используется,  и в
этом случае файловая структура диска для  системы  не  имеет  никакого
смысла.  Диск может выглядеть нечитаемым на ЭВМ, где загружена обычная
операционная система,  ведь автономный  Форт  может  использовать  для
своих  целей  и  зону  оглавления диска,  хотя это и нежелательно.  Но
"нечитаемое"  оглавление  может  использоваться   для   предотвращения
несанкционированного  копирования программ.  Копирование дисков в этом
варианте должно проводиться поблочно.  Возможно копирование с диска на
диск и без выхода из системы Форт.  Например,  для мини-дисков (с MX0:
на MX1:):

      : COPYD 40 0 DO HERE I 0 RTS ." TR=" I. CR I 40 +
		      TRACK WRTR
                   LOOP ;

RTS и  WRTR,  TRACK  -  операторы  чтения и записи трека и перехода на
соседний трек.

   Разработанные автономные    версии   предоставляют   дополнительные
удобства,  например управление выдачей на экран или печать  с  помощью
команд  <^Q>,  <^O>,  <^S>,  простой  способ возврата в Форт-систему с
помощью  <^C>,  в  то  время,  как  операционная  система   возвращает
управление   терминальному   монитору,   удаляя  Форт  из  памяти.  ^C
^C-перехват,  предусмотренный в  ОС  RT-11,  позволяет  решить  ту  же
задачу, введя специальный оператор в рабочую программу, но это заметно
замедляет ее  исполнение.  Пожалуй,  только  автономная  версия  Форта
пригодна  для  небольшого  стенда для испытания электронной аппаратуры
или других измерений,  где объем поступающих данных невелик. Для таких
задач  при  работе  с  Фортом  хватит даже одного гибкого мини-диска с
одинарной плотностью записи.

   Пример текста программы  для  формирования  автономной  версии  для
гибкого мини-диска представлен в приложении 6.

   Хотя автономная  версия  может  работать,  не пользуясь оглавлением
диска,  во многих случаях целесообразно сохранить файловую  структуру.
Это  позволяет  использовать  и  копировать программы с диска на диск,
когда эти программы сформированы с  помощью  различных  версий  Форта.
Чтение  оглавления диска (DIRECTORY) из системы Форт не предусмотрено,
что  создает  определенные  трудности,  так  как  для   знакомства   с
содержимым  диска приходится выходить из системы Форт,  а в автономном
варианте загружать операционную систему.

   Программа чтения  оглавления  диска  (приложение  7),  находясь   в
системе  Форт  (предполагается,  что  файловая структура соответствует
системе RT-11).  Оператор  RASC  преобразует  N  слов  RAD50,  лежащих
начиная с адреса ADR1,  и укладывает последовательность кодов ASCII по
адресу ADR2 и далее,  обращение:  ADR1 ADR2 N RASC.  В  Программе  DIR
предполагается,  что  имена 12 месяцев описаны ранее в виде 1 CONSTANT
JAN 2 CONSTANT FEB 3 CONSTANT MAR и т.д.


        9.2. ФОРТ В ПОСТОЯННОМ ЗАПОМИНАЮЩЕМ УСТРОЙСТВЕ


   Пользователям, имеющим в своем распоряжении хорошо оснащенную ЭВМ и
работающему в комфортных условиях,  трудно понять необходимость записи
Форт-интерпретатора в постоянное запоминающее устройство  (ПЗУ)  (этот
раздел они могут пропустить).


		 Х Р А Н И Т Ь       В Е Ч Н О
                ┌─┬───┬───┬───╔═══╗───┬───┬───┐
                │ │ B │   │ B ║ F ║   │   │   │
                │ │ O │ O │ I ║ 0 ║   │   │   │
                │ │ O │ D │ O ║ R ║   │   │   │
                │ │ T │ T │ S ║ T ║   │   │   │
                │ │   │   │   ║ H ║   │   │   │
                └─┴───┴───┴───╚═══╝───┴───┴───┘
		      П З У


   Рассмотрим некоторые преимущества Форт в ПЗУ:

   устойчивость системы к помехам в сети и наводкам;

   экономия оперативной-памяти  (4-8  Кбайт в случае ОС RT-11 [38]) (в
этом разделе везде подразумевается ОС RT-11),  и места на диске (места
на диске, как денег, всегда не хватает).

   появляется возможность  наладки  контроллеров  внешних  устройств с
использованием  языка  высокого  уровня,  когда  в   ЭВМ   отсутствуют
какие-либо внешние устройства долговременной памяти, а следовательно и
ОС.

   Последнее свойство таких систем позволяет использовать их также для
целей диагностики ЭВМ с неисправной периферией.

   При подготовке  версии  интерпретатора  и прикладных Форт-программ,
предназначенных  для  записи  в  ПЗУ,  нужно  следить,  чтобы  в  теле
программы не было модифицируемых ячеек,  т.е. все массивы и переменные
должны быть вне области ПЗУ.  Для ЭВМ типа "Электроника" и СМ  следует
избегать применения команд MTPS,  MUL,  DIV, ASH и ASHC, оперирующих с
ячейками памяти,  так как они пытаются модифицировать содержимое  этих
ячеек,  а  это  с неизбежностью вызовет отсутствие отклика и остановку
(прерывание) процессора.  Возможно решение, где плата ПЗУ обеспечивает
фиктивный отклик на попытку записи.

   Один из вариантов размещения системы Форт в памяти для работы с ПЗУ
изображен на  рис.10.  Интерпретатор  помещен  на  месте,  где  обычно
находится  RMON,  "хандлер"  системного  устройства  и  программа  USR
(работа с файлами).

   Определенные трудности возникают с описаниями слов ;CODE,  FORTH  и
END  (конец базового словаря),  так как некоторые ячейки этих описаний
должны модифицироваться (FORTH при инициализации, а ;CODE при загрузке
Форт-ассемблера).  Поэтому  при  запуске  системы  эти  слова-описания
переносятся в область SOFE,  одновременно автоматически  редактируются
их  константы  связи.  Как видно,  словарь новых описаний начинается с
ячейки 1000 (восьмеричная).  Расположение стеков,  экранных буферов  и
т.д. является традиционным.

   Данная версия Форт-ПЗУ может занимать 8 Кбайт, позволяет работать с
гибким диском,  обрабатывать прерывания (см.  гл.8),  по  сравнению  с
FIG-FORTH  она дополнена словами-операторами S.,  О.,  COPY,  TY,  C,,
DUMP,  STY и SWAS (их описания приведены в гл.4,5 и 7), что делает эту
автономную  версию более эффективной.  Хотя Форт-ПЗУ работает с гибким


   ┌──────────────────────┐ XDP = 1000 ( OCTAL )
   │       СЛОВАРЬ        │
   ├──────────────────────┤ XSO (начало стека параметров)
   │   Экранные буферы    │
   │     3*1028 байт      │
   ├──────────────────────┤
   │   Стек прерываний    │   60 байт
   ├──────────────────────┤─┬───
   │  Входной буфер (TIB) │\│/
   ├──────────────────────┤  190 байт
   │    Стек возвратов    │/│\
   ├──────────────────────┤─┴───
   │     Область USER     │ 132
   ├──────────────────────┤
   │ Кольцевой буфер IBUF │ 130
   ├──────────────────────┤
   │        TIME          │  4
   ├──────────────────────┤
   │        DATE          │  2
   ├──────────────────────┤
   │        SOFE          │  50
   ├──────────────────────┤     Верхняя граница адресов
   │        BEGI          │---> 140000 (OCTAL)
   └──────────────────────┘

          Рис. 10. Размещение секций Форта в ПЗУ


диском,  ОС ему не нужна и весь  объем  дискового  пространства  можно
использовать исключительно для хранения программ. Практика показывает,
что благодаря компактности Форт-программ  одного  5-дюймового  гибкого
диска  с  одинарной  плотностью  записи вполне достаточно для хранения
управляющих программ довольно сложных измерительных комплексов.

   Форт-ПЗУ может быть полезным и  эффективным  там,  где  набор  слов
фиксирован (бортовые   программно-управляющие   средства,  медицинские
мониторные системы), а также в дешевых персональных ЭВМ с ограниченной
памятью и дисковым пространством.

   Возможно два    представления   Форт-программ   -   стандартное   и
компактное,  лишенное имен и кодов связей.  Второе требует  на  20-30%
меньше  памяти и работает на 25-45%  быстрее,  но исключает дополнение
словаря новыми описаниями.  Стандартное  представление  сохраняет  для
пользователя все возможности системы Форт без изъятия.



                 9.3. МНОГОЗАДАЧНАЯ ВЕРСИЯ ФОРТА


   Форт наиболее эффективен для задач управления.  Современные  задачи
характеризуются тем, что требуют контролировать несколько одновременно
происходящих процессов.  Эти  процессы  могут  быть  независимыми  или
взаимодействующими.

   Версия FIG-FORTH, а также описанная в [28-30] ориентированы на одну
задачу-процесс.   Эти   версии   позволяют,   конечно,   управлять   и
многопроцессорными экспериментами,  но они не могут быть эффективными,
особенно в  тех  случаях,  когда  требуется  "мгновенная"  реакция  на
события  в  сочетании  с быстрым обменом информацией между процессами.
Именно  эти  обстоятельства  и   послужили   стимулом   для   создания
многозадачной версии Форта (MT) [39].

   Разработанная версия     рассчитана     на    четыре    независимых
задачи-процесса.  Каждая задача имеет три буфера (экрана) для работы с
дисками и независимые области для словарей,  стеков и входных буферов.
Базовый словарь общий для всех  задач.  Распределение  ресурса  памяти
между    словарями   задач   жесткое,   определяется   при   генерации
интерпретатора.  Размещение буферов в памяти показана на  рис.11.  Эта
версия разработана для микроЭВМ ДВК.  Главным ее ограничением является
малая емкость памяти ЭВМ.  Однако этот вариант легко развить для ЭВМ с
расширенной памятью (более 64 Кбайт).

   Главной трудностью  при  создании интерпретатора было распределение
ресурсов внешних устройств между процессорами. Для решения этой задачи
в данной реализации применены слова-операторы EXB,  FRE, SDS, CDS, SPL
и CBL, введены специальные флаги-семафоры, управляющие "захватом" того
или иного ресурса.

       --------	┌──────────────────────────┐
		│    Словарь задания 0     │
		├──────────────────────────┤
		│           Стек           │
		├──────────────────────────┤-- SO
		│  Дисковые буферы 3*1024  │
       Задача 0 ├──────────────────────────┤
		│     Стек прерываний      │
		├──────────────────────────┤-- начало стека
		│       Область USER       │
		├──────────────────────────┤-- RPO
		│     буфер терминала      │
       --------	├──────────────────────────┤
		│        Задача 1          │
		├──────────────────────────┤
		│        Задача 2          │
		├──────────────────────────┤
		│        Задача 3          │
		└──────────────────────────┘


  Рис. 11. Структура буферов многозадачной версии Форта

   Переключение процессора с одной задачи  на  другую  выполняется  по
внутренним   часам   ЭВМ  под  управлением  программы  MAN.  Программа
просматривает состояние всех задач,  выделяет из  них  те,  выполнению
которых  ничто не препятствует (задача не ожидает какого-либо занятого
ресурса внешних устройств).  Для этих задач  вычисляется  произведение
PRIO*DELAY,  где  PRIO  -  приоритет  задачи,  а DELAY - число квантов
времени пребывания задачи в пассивном состоянии из-за выполнения более
приоритетного задания. Задача с наибольшим произведением запускается в
работу  на  время  очередного  кванта.  Значение  PRIO   устанавливает
программист,  оно может изменяться в процессе выполнения задачи.  Если
задание выходит в точку, где требуется печатающее устройство, вывод на
дисплей  или  обмен  с  диском,  а  данный ресурс занят.  Производится
перевод задачи в режим ожидания до момента  освобождения  необходимого
ресурса.  Более сложна конкуренция при ожидании ввода с терминала. Для
системы Форт в пассивном состоянии (QUIT) характерно ожидание ввода  с
терминала.  Таким образом, сразу после загрузки все виртуальные задачи
ожидают ввода с клавиатуры.  В процессе  работы  любое  задание  также
может потребовать ввода.

   Для организации процесса перераспределения ресурсов каждая из задач
имеет в пользовательской области статусную переменную STA.  (адрес 0 в
пользовательской     области     USER).    Каждый    ресурс    снабжен
флагом-семафором: TERB - ввод с клавиатуры, DSB - вывод на экран, PRIB
-  вывод  на  печать,  DIB  -  обмен  с  диском.  Если  ресурс  занят,
флаг-семафор равен USN+1,  где USN - номер задания,  им владеющего,  в
противном случае он равен нулю.

   Подпрограмма STD  используется в словах-операторах KEY и EXB.  Если
задание является "хозяином" клавиатуры,  то при входе  в  STD  никаких
изменений  не  происходит  и  система  ожидает ввода.  Если "хозяином"
клавиатуры является другое задание и его STA >0, данное задание входит
в цикл ожидания ресурса,  в противном случае задача захватывает ресурс
сама, установив TERB=USN+1 (USN - номер этого задания). Для управления
вводом-выводом   используется  флаг  TERB+1,  который  устанавливается
командой ^X (при этом блокируется любой  вывод  на  экран  терминала).
Очистка  TERB+1 производится сигналом <ВК>,  одновременно сбрасываются
старший  и  младший  биты  переменной  STA.  Таким   образом,   вывод,
прерванный ^X на время ввода команды с пульта, будет продолжен.

   Задание, непосредственно  потребовавшее  ввода,  может его отнять у
задачи, пребывающей в состоянии QUIT. Если право на ввод было получено
заданием  в  процессе  EXECUTE,  оно  остается единственным владельцем
этого ресурса до тех пор, пока пользователь не нажмет клавишу "Возврат
каретки".  Все прочие задания,  также требующие ввода, будут вынуждены
ожидать этого  события.  Аналогичным  приоритетом  по  вводу  обладает
задание,  активированное  командой  N  TASK  (N  -  номер  виртуальной
задачи).

   Для других ресурсов  захват  возможен  лишь  при  нулевом  значении
семафора,  т.е.  только  после  их освобождения.  Каждое прерывание по
часам ЭВМ (50 Гц) приводит к обращению к планировщику MAN и  просмотру
состояния  заданий.  Процессорное время предоставляется только задаче,
готовой  к  исполнению.  Во  время  работы  MAN   внешние   прерывания
запрещены. Аналогичная ситуация имеет место при обработке прерываний с
клавиатуры терминала.

   Каждое задание имеет свой  входной  кольцевой  буфер  емкостью  134
байт,  куда заносятся коды ASCII,  поступающие от клавиатуры. Из этого
кольцевого буфера они  извлекаются  оператором  KEY.  Соответствующего
выходного   буфера  для  дисплея  или  принтера  в  данной  версии  не
предусмотрено.

   Логика переключения семафора исключает ошибочный  ввод  символов  в
буфер  "чужого"  задания.  В  рассматриваемой версии с целью ускорения
работы системы предусмотрено наличие трех экранных буферов для каждого
задания   (сокращается  число  чтений-записей  с  диска  и  на  диск).
Одновременно это создает широкие возможности обмена экранами,  а также
меньшими  порциями  информации  между  активными заданиями.  При этом,
правда,  виртуальный файл FORTH.DAT является общим для всех задач, что
практически  не  налагает  серьезных ограничений,  хотя и не избавляет
программиста от необходимости быть внимательным.

   Таким образом, одновременно в оперативной памяти может разместиться
12  экранов (12 Кбайт).  Это,  конечно,  ограничивает предельный объем
словарей.  При необходимости расширения словарей  можно  передать  эти
буферы  под словари на уровне генерации системы.  Надо только помнить,
что в этом случае одно или  более  заданий  будет  лишено  возможности
пользоваться диском.

   Еще одной   особенностью   многозадачного  Форта  является  наличие
областей  пользовательских  переменных.  В  этих   областях   хранятся
переменные, полностью характеризующие состояние задачи. При прерывании
по часам и переключении с одной задачи на  другую  меняется  указатель
области  пользовательских  переменных  и сохраняются-восстанавливаются
слово состояния JSW и указатель стека возвратов. В данном случае слово
состояния   JSW  используется  только  для  управления  вводом-выводом
(разряды 6 и 12) аналогично ОС RT-11.  Такая схема упрощает  программу
смены   задач   и   сокращает  непроизводительные  потери  времени  на
сохранение-восстановление большого числа переменных.

     ┌──────────────────────────────────────────────────────────────┐
     │                                                              │
     │ QUIT   ┌──────────────────────────────────┐                  │
     │ STA    │ EXPECT            100001         │  0               │
     │ 10000  │     ┌─────────────────────┐      │      ┌─────────┐ │
     │        │     │  ┌─────┐   ┌──────┐ │ ┌───┐│ ┌───┐│INTERPRET│ │
     │ ┌───┐  │     │  │     │   │      │ │ │   ││ │   ││         │ │
     ├>┤EXB├──┼──┬──┼──┤ STD ├─>─┤ WAIT ├───┤   ├┼─┤FRE├┤ EXECUTE │ │
     │ └─┬─┘  │  ^  │  │     │   │      │ │ │   ││ │   │├─────────┤ │
     │   │    │  │  │  └─────┘   └──────┘ │ └─┬─┘│ └───┘│  NULL   │ │
     │   ^    │  │  │TERB = USN+1         │   │  │      └────┬────┘ │
     │   │    │  │  └─────────────────────┘   │  │           │      │
     │   │    │  └────────────────────────────┘  │           │      │
     │   │    └──────────────────────────────────┘           │      │
     │   └───────────────────────────────────────────────────┘      │
     └───────────────────┬─────────────┬─────────────┬──────────────┘
                         ^      STA=40 ^             v STA=20
                    ┌────┴─────┐    ┌──┴─────────────┴──┐
                    │Прерывания│    │Прерывания от часов│
                    └──────────┘    └───────────────────┘


   Рис. 12. Управление семафорами и схема обработки прерываний

   Механизм управления  флагами-семафорами  для  клавиатуры  терминала
показан  на  рис.12.  Операторы  EXB  и FRE устанавливают и сбрасывают
управляющие биты переменной состояния  STA  (область  пользовательских
переменных).   Оператор   KEY   входит  в  состав  слова  EXPECT  (это
справедливо   и   для   FIG-FORTH),   но   может   использоваться    и
самостоятельно,  в  последнем  случае  в  конце  его  исполнения  флаг
занятости сбрасывается.  Но эта процедура внутри  EXPECT  блокирована,
чтобы   подавить   переключение  ввода  на  другой  входной  буфер  до
завершения процедуры QUERY,  составной частью которой является EXPECT.
Таким  образом,  вводимая  команда  будет  целиком  загружена в нужный
буфер.

   Область пользовательских и системных переменных.
   Системные переменные  образуют особый класс слов Форт.  В FIG-FORTH
они размещены в специальной области памяти - области  пользовательских
переменных  USER.  Такое  решение  упрощает  создание  многозадачной и
многопользовательской   версий   интерпретатора.    Часть    системных
переменных   является   универсальной   для   многих   версий,  другие
используются только в конкретных реализациях.

   Имена и функции основных системных переменных приведены в  табл.26.
Часть  из них используется в качестве констант,  задающих режим работы
интерпретатора:  WIDTH фиксирует максимальную длину имен операторов  в
словаре  Форта,  WARNING  (предупреждение) определяет характер отклика
при  ошибках  и  прочих  ситуациях,  ненормальных   с   точки   зрения
интерпретатора;   PTN  при  неравенстве  нулю  дублирует  все  выдачи,
поступающие  на  экран,  цифропечатающее  устройство;  FENCE  (ограда)
служит  для  защиты  базового  словаря от стирания с помощью оператора
FORGET,  указывает адрес,  предшествующий первой  свободной  ячейке  в
словаре сразу после загрузки системы Форт, т.е. при этом FENCE @ равно
HERE-2.

   Другие системные переменные задают текущий  режим  работы  и  могут
изменяться   в  процессе  исполнения  программы:  STATE  задает  режим
исполнения  (=0)  или   интерпретации   (='300);   CONTEXT/CURRENT   -
контекстные   переключатели  словаря;  BASE  -  основание  действующей
системы счисления;  BLK переключает ввод  информации  на  терминальный
буфер  (BLK=0)  или  на  экранный  (BLK,  равный  номеру  экрана);  DP
указывает на первую свободную ячейку словаря (DP @ = HERE); SCR служит
для   хранения   текущего   значения   номера  экрана  (например,  при
редактировании);   IN   -   внутренний   указатель   входного   буфера
(терминального  или  экранного  в  зависимости от значения BLK);  R# -
указатель  положения  курсора  на  экране;  VOCL  -  переменная  связи
контекстных словарей.

   Третью группу  образуют  переменные,  которые  при работе обычно не
меняются и задают взаимоположения отдельных частей системы Форт:  S0 и
R0  определяют  положение  начала  стека  параметров и стека возвратов
соответственно; TIB - указатель начала входного буфера;

Таблица 26. Системные переменные Форт
----------------------------------------------------------------------
    Имя                       Функция
----------------------------------------------------------------------
S0             Указатель начала стека параметров
R0             Указатель начала стека возврата
TIB            Указатель начала входного буфера
IN (>IN)       Указатель смещения во входном (или экранном) буфере
BLK            BLK=0 - работа системы со входным терминальным буфером,
	       BLK=/=0 - работа с блоком номер BLK@
WIDTH          Определяет максимальную длину имени в словаре
DP (Н)         Указатель на первую свободную ячейку в словаре.
               DP@ = HERE
BASE           Основание системы счисления
FENCE          Граница базового словаря Форт. Используется оператором
               FORGET
CURRENT        Указатель, к какому словарю будет отнесено новое слово
CONTEXT        Указатель, с какого словаря следует начинать просмотр
               при интерпретации
SCR            Номер редактируемого экрана
R#             Указатель положения курсора на экране при
	       редактировании
STATE          STATE=0 - исполнение, STATE='300 - компиляция
----------------------------------------------------------------------

FIRST - адрес первого байта экранных буферов,  LIMIT - указатель конца
экранных буферов и некоторые другие.

   Если область памяти USER имеет достаточные размеры,  можно  описать
свои  переменные,  имеющие аналогичный статус.  Для этого используется
оператор USER, который по своим функциям сходен с оператором VARIABLE,
но  определяемые  им  переменные  лежат  не  в  словаре,  а  в области
пользовательских переменных.  Форма  описания  также  несколько  иная,
например:  66  USER  NEW,  где  NEW - имя новой переменной (описание в
словаре); 66 - положение ячейки, где записано ее значение, отсчитанное
от  начала  области пользовательских переменных.  В отличие от обычной
переменной NEW будет иметь в первой ячейке поля параметров  число  66,
которое  при обращении будет использовано как указатель ячейки области
USER,  из которой следует взять  ее  значение.  Для  пользователя  эта
переменная ничем не отличается от обычной.  При обращении к NEW в стек
будет записан  адрес  значения  этой  переменной.  При  извлечении  ее
значения в стек следует выполнить команду типа NEW @.

   Структура контекстных словарей виртуальных задач.
   Схема связей  словарей  задач  0,...,  3  представлена  на  рис.13.
Словари TASK-1, TASK-2 и TASK-3 в отличие от FIG-FORTH связаны с PFA+6
(адрес поля параметров + 6) FORTH.  В FIG-FORTH  PFA+6  TASK-2  должно
было бы указывать на PFA+6 TASK-1, а VOCL (переменная из области USER,

                    ┌────────────────┐
                    │  Базовый Форт  │ = Задание 0
                    ├────────────────┤
                    │      CFA       │   DODOE  Системное
                    ├────────────────┤           задание
                    │      PFA       │   DOVOC
                    ├────────────────┤
      Форт          │     PFA+2      │   120201  Заголовок
    ┌───────┐       ├────────────────┤           подставка
    │ LAST 0├───>───┤     PFA+4      │<--CURENT
    ├───────┤       ├────────────────┤
    │       │       │     PFA+6      │<───┐<──┐
    └───────┘       └────────────────┘    │   │
     Слово,                               │   │
     определенное                         │   │
     последним      ┌────────────────┐    │   │
                    │   Задание 1    │    │   │
                    ├────────────────┤    │   │
     (CURRENT @ CFA)│      CFA       │    │   │
                    ├────────────────┤    │   │
                    │      PFA       │    │   │
                    ├────────────────┤    │   │
       NFA          │     PFA+2      │    │   │
    ┌───────┐       ├────────────────┤    │   │
    │ LAST 1├───>───┤     PFA+4      │    │   │ <- CONTEXT
    ├───────┤       ├────────────────┤    │   │
    │       │       │     PFA+6      │──>─┘   │ <- VOCL
    └───────┘       └────────────────┘        │    Задание 1
                                              │
                   ....................       │
                    ┌────────────────┐        │
                    │   Задание 3    │        │
                    ├────────────────┤        │
                    │      CFA       │        │
                    ├────────────────┤        │
                    │      PFA       │        │
                    ├────────────────┤        │
       NFA          │     PFA+2      │        │
    ┌───────┐       ├────────────────┤        │
    │ LAST 3├───>───┤     PFA+4      │        │ <- CONTEXT
    ├───────┤       ├────────────────┤        │
    │       │       │     PFA+6      │───>────┘ <- VOCL
    └───────┘       └────────────────┘             Задание 3



          Рис. 13. Схема связей между словарями задач

содержащая адрес  связи  словарей  с  разными  контекстами) - на PFA+6
TASK-2.  Структура словаря обеспечивает  свободный  обмен  информацией
между  задачами.  Для  реализации  такого  обмена общие переменные или
массивы должны быть описаны в TASK-0 (Форт) или храниться в  одном  из
экранных  буферов.  Возможны  варианты,  где буфер находится в словаре
TASK-i, а указатель на него - в TASK-0.

   Работа с многозадачным Фортом.
   Загрузка многозадачного   Форта   не   отличается  от  обычной.  По
завершении загрузки появляется сообщение FORTH-MT IS  HERE.  При  этом
инициализированы  все  четыре  виртуальные  задачи (если сгенерирована
именно такая версия). Далее запускается основная задача. Вход в задачу
i+1 можно осуществить, нажав ^X, при этом ЭВМ выдаст Tj, где j - номер
очередной виртуальной задачи.  Переадресацию ввода на задачу  j  можно
выполнить  также  с  помощью  команды  J  TASK,  где J может принимать
значения 0,  1, 2 и 3. Подтверждение выполнения команды аналогично ^X.
Теперь вплоть до нажатия клавиши <ВК> все вводимые символы поступают в
кольцевой  буфер  указанной   задачи.   Принадлежность   ввода   можно
определить, нажав <ВК>. В норме отклик должен быть, как и при ^X или J
TASK.  Но  если  задача  находится  в  активном  состоянии  (например,
производится счет), отклика может и не быть. Кроме того, после нажатия
клавиши <ВК> за ввод  позволено  бороться  любой  задаче.  Если  нужно
ввести  текст,  содержащий  несколько  строк,  в некоторых случаях это
может потребовать манипулирования вводом через ^X или J TASK,  что  на
практике встречается редко. В процессе ввода команды все задачи (кроме
J) продолжают работать.

   Вывод на экран управляется командами ^X,  ^S  и  ^Q:  ^X  прерывает
выдачу  на  экран  и возобновляет ее по завершении ввода после нажатия
<ВК>,  ^S прерывает вывод,  ^Q возобновляет как и в случае  ОС  RT-11.
Исполнение задачи - хозяина ввода - прерывает команда ^C,  переводя ее
в режим QUIT (ожидание новых инструкций).  Перевод многозадачного Форт
в  базисное  состояние  производится  командой INI.  В этом случае все
буферы очищаются,  инициализируются стеки и уничтожаются все  словари,
введенные  после  стартовой  загрузки.  Если  требуется  установить  в
базисное состояние только одну виртуальную задачу  J,  следует  выдать
команду J INIT. Функции INI и INIT те же, что и в случае COLD [17,30].

   Многозадачный Форт устроен так, что пользователю достаточно освоить
только несколько новых команд,  связанных с переключением  ресурсов  и
задач.   Поскольку   выдача   на  экран  терминала  или  печать  может
производиться   несколькими   задачами    попеременно,    пользователю
рекомендуется  начинать каждую выдачу с пропечатки номера задачи.  Для
этого предусмотрена команда TSK,  которая в начале первой строки пишет
Tj>,  где  j  -  номер  задачи,  откуда производится выдача.  В случае
персональной ЭВМ возможно  использование  разными  задачами  различных
цветов (или фонов).

   Для преобразования  версии  FIG-FORTH  [30] в многозадачный вариант
Форта пришлось переделать или написать заново 32 слова.  Интерпретатор
позволяет   легко  перейти  от  этой  версии  к  многопользовательской
(PolyFORTH [15,16]). Для этого в области USER предусмотрена переменная
(CSR),  которая хранит адрес терминала пользователя. Интерпретатор для
многопользовательской версии,  сохранив все возможности многозадачной,
несколько   упростится,   так   как   из   него  будут  убраны  части,
ответственные за обслуживание нескольких задач с одного терминала. Это
справедливо,  если  каждому  пользователю разрешен запуск только одной
задачи.  Для круга проблем,  где Форт эффективен, такое ограничение не
существенно.  В многозадачном Форте защита задания от влияния ошибок в
других задачах целиком лежит на  программисте  (ведь  он  хозяин  всех
задач).   В   многопользовательском   варианте  это  становится  более
актуальным,  желательны  аппаратные  средства,  которые  на  системном
уровне защитят одного пользователя от ошибок другого.

   Примеры использования многозадачного Форта.
   Простейшим примером  может  быть  выдача  на   печать   протяженных
массивов.  При  работе с версией МТ-Форта можно запустить такую печать
и, перейдя к другой виртуальной задаче, заняться редактированием любой
(в том числе работающей) программы.

   В условиях эксперимента одна из задач может вести накопление данных
(обработка прерываний, гистограммирование и т.д.), вторая представлять
результаты  на  графическом  мониторе,  третья  записывать  данные  на
магнитный носитель,  четвертая обслуживать запросы оператора. Возможно
и другое распределение обязанностей.

   Достоинствами многозадачной версии являются:

   совместное использование   четырьмя   задачами-процессами  базового
словаря Форт, что заметно снижает требования к емкости памяти;

   простота обмена   информацией   между   задачами   (удобнее,    чем
FOREGROUND-BACKGROUND в ОС RT-11).

   Последнее свойство служит причиной главного недостатка - отсутствия
защиты от взаимного  влияния  заданий  в  случае  программных  ошибок.
Переделка  МТ-Форта  ЭВМ  типа  СМ для персональных ЭВМ IBM PC больших
трудностей не составит.  Но к  описанным  недостаткам  в  этом  случае
добавится  несовершенство  базовой  системы ввода-вывода BIOS.  Дело в
том,  что версия BIOS этих ЭВМ сильно ориентирована на одну  задачу  и
затрудняет  использование времени ожидания при вводе-выводе для работы
параллельных  заданий.  Таким  образом,  для  обеспечения  эффективной
работы  Форта  на  IBM  PC  в  многозадачном или многопользовательском
режиме желательно переделать BIOS ЭВМ.

   Важной особенностью  описанной  версии  реализации   многозадачного
Форта  является  возможность  его  работы  автономно  без операционной
системы.


                             ЗАКЛЮЧЕНИЕ


   Если у вас хватило времени и сил просмотреть эту книгу,  вы поняли,
что  не  существует  задач,  которые  бы  было нельзя решить с помощью
Форта.  Этот относительно молодой  язык  успешно  соревнуется  как  со
старожилами  мира  программирования  (Фортраном,  Паскалем),  так  и с
такими новыми,  но мощными конкурентами, как Си. В литературе около 10
лет назад предсказывалась триумфальная победа Паскаля над Фортраном. И
хотя Паскаль имеет на своем счету немало успехов, вытеснить Фортран из
его  традиционной  "среды  обитания"  -  научных расчетов - Паскалю не
удалось. Этому есть несколько причин. Среди основных - появление новой
версии Фортрана,  а главное - огромная библиотека прикладных программ,
с которыми потребители,  естественно,  не желают расставаться. Сделать
правильный прогноз для Форта не легче.  Появление Форт-процессоров,  в
том числе с сокращенным набором команд, удобство применения в качестве
промежуточного  языка  при  написании трансляторов,  простота работы с
периферийным оборудованием  и,  конечно,  великолепные  перспективы  в
сфере  управления  в  реальном  масштабе  времени  - все это говорит в
пользу Форта.  Но судьба языков определяется не  только  их  удобством
(пример  тому  -  история  Алгола),  здесь  играет  роль  и активность
энтузиастов,  и появление доступных  пакетов  прикладных  программ,  и
поддержка  мощными  фирмами  и  многое другое.  Одно ясно - Форт имеет
право на жизнь,  многие идеи,  заложенные в  нем,  несомненно,  окажут
влияние   на   пути   эволюции   языков   программирования.   Если  вы
заинтересуетесь  Фортом  и  попытаетесь  написать  на   нем   какие-то
программы, автор будет считать свою задачу выполненной.

   Пожалуй, ни  одна  система  программирования  не  вызывала  у  меня
чувств,  близких к тем,  какие испытал главный  герой  романа  Г.Гессе
"Игра в бисер" Кнехт - он наслаждался гармонией математических формул.
Форт  может  доставить  немало  мгновений  эстетического   наслаждения
программистам-профессионалам.

