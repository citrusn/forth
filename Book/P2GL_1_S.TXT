               ЧАСТЬ II. РАСШИРЕНИЕ ВОЗМОЖНОСТЕЙ ФОРТА

                Глава 1 . ФОРМАТЫ ПРЕДСТАВЛЕНИЯ ЧИСЕЛ



   Код, введенный с пульта,  сначала ищется в  словаре,  а  затем  при
неудаче преобразуется в число с учетом действующей системы счисления и
его  формата.  Если  такое  преобразование   неосуществимо,   выдается
сообщение  об  ошибке  (MSG#  0).  При  успешном преобразовании в стек
поступает два кода N1 и N2.

   На входе любое число представляется в виде последовательности XXXXX
кодов ASCII, в одном из трех форматов:

      +-XXXXX - числа одинарной длины,
      +-XXXXX.XXXXX - числа двойной длины,
      +-XXXXX.XXXXXE+-YY - числа с плавающей точкой.

   Наиболее часто  используемый  формат  первый  - для чисел одинарной
длины (16-разрядных).  Второй формат ориентирован на работу  с  целыми
числами  двойной длины (32-разрядными).  В третьем формате E - признак
порядка  +или-YY  числа.  Наличие  плюса  или   минуса   перед   XXXXX
предполагает,  что  данное  число  представлено  в  десятичной системе
счисления.  По завершении преобразования основание  системы  счисления
(значение  системной  переменной  BASE) не изменяется.  Апостроф перед
первой цифрой (FIG) означает восьмеричное входное представление  числа
(например,  '10=8). Между +, -, ' и первой цифрой числа не должно быть
пробела.  Это  же  касается  E  и  порядка,  иными   словами   входное
представление  числа  не  должно  содержать  пробелов.  Библиотеки для
работы с такими числами поставляются отдельно и в базовый  словарь  не
входят.  Интерпретация  чисел  выполняется  оператором  NUMBER (число)
(табл.15).

                                    \               /
                                      \           /
                                       ╔═════════╗
                                  ---- ║ B A S E ║ ----
                                       ╚════╦════╝
                                     / ┌────╨────┐ \
               ╔═══════════╗       /   │  NUMBER │   \
               ║ A S C I I ║           │         │
               ╚═══════════╝           │    ║    │
       ┌──┐┌──┐┌──┐┌──┐┌──┐┌──┐┌──┐     \_ \║/ _/            ЧИСЛО
       │71││70││67││66││65││64││63│       \___/
       └──┘└──┘└──┘└──┘└──┘└──┘└──┘                          2 1 0
      ══════════════════════════════════════════════════════════════

Таблица 15. Управляющие операторы
----------------------------------------------------------------------
Имя            Состояние    Версия          Функция
                 стека
----------------------------------------------------------------------
NUMBER         адр --> n  9, 3, F, М  Преобразует последовательность
               или d                  символов, начиная с адр+1 с
			              учетом BASE, в двоичное число
                                      одинарной длины (или двойной,
			              если текст имеет соответствующий
                                      формат); адр может содержать
			              число символов в тексте

IMMEDIATE      - --> -     9, 3, F    Преобразует слово, за описанием
			              которого следует, в оператор,
			              исполняемый при компиляции

COMPILE XXX    - --> -     9, 3, F    Используется при описании новых
               (C)                    слов. CFA слова XXX вносится в
			              соответствующую позицию PFA
			              нового слова. В результате при
			              исполнении нового слова будет
                                      исполнено и слово XXX

[COMPILE] XXX  - --> -     9, 3, F    Используется в описании типа
               (I, C)                 двоеточия и служит для
			              компиляции слова немедленного
                                      действия XXX, как если бы оно
                                      не было таким. Слово XXX будет
			              исполнено тогда, когда будет
                                      исполнено слово, в котором
                                      использована комбинация
                                      [COMPILE]XXX

FORGET XXX     - --> -     9, 3, F    Удаляет из словаря, начиная с
                                      конца, все слова вплоть до XXX
			              включительно

П р и м е ч а н и е.  I - слово немедленного исполнения,
                      C - используется в режиме компиляции;
                      9 - стандарт Форт-79,
                      3 - стандарт Форт-83, F - FIG-FORT, M-MMSFORTH.
----------------------------------------------------------------------

   В процессе  преобразования   NUMBER   присваивает   значения   двум
переменным  из  области  USER  (FIG-FORTH  [30]) DPL и EXP.  Последнее
содержит целочисленное значение  порядка  числа,  который  следует  за
признаком Е, а DPL определяет положение десятичной запятой (во входном
представлении это точка), для чисел одинарной длины DPL=-1.

   Положение "." не определяет разделения кода на два числа.  Пока  16
разрядов   хватает,   число  размещается  в  одной  ячейке.  Если  для
размещения  кода  требуется   более   16   разрядов,   старшая   часть
записывается в стек поверх первого.

                  DECIMAL

                  111.11 U. <ВК> 0 OK
				 - --
                  U. <ВК> 1111 OK
			  ---- --
                  DPL @ <BK> 2 OK
			     - --
                  OCTAL

                  2222.222 U. <BK> 11 OK
				   -- --
                  U. <BK> 22222
			  -----
                  DPL @ . <BK> 3 OK
			       - --

   Оператор NUMBER использует только 10 вводимых цифр, что накладывает
ограничение на точность.  Если будет введено более 10 цифр,  результат
окажется неверным.  Следует также помнить,  что NUMBER не  преобразует
число  в  формат  с  плавающей  точкой (во всяком случае это верно для
некоторых версий Форта),  а только подготавливает для  этого  исходные
данные.   Окончательное   преобразование   выполняется  оператором  из
библиотеки для работы с числами с плавающей точкой (например, FL).

   Обычно обращение к NUMBER происходит  автоматически  и  не  требует
вмешательства    программиста.    Но   встречаются   ситуации,   когда
программисту требуется ввести число  в  диалоговом  режиме,  тогда  он
должен  записать  в  стек адрес начала последовательности кодов ASCII,
описывающей введенное число,  и после  этого  обратиться  к  оператору
NUMBER.  Например,  опишем слово TTT, которое запрашивает ввод числа и
распечатывает число:

   : TTT ." ENTER>"                ( приглашение к вводу)
	 QUERY                             ( ввод строки)
         BL WORD         ( выделение последовательности,
		                      определяющей число)
         HERE NUMBER  ( преобразование числа и занесение
		            результата в стек параметров)
         DROP ;      ( удаление из стека старшей части и
		                   распечатка результата)

   (О представлении  кодов на выходе оператора WORD см.  гл.3 ч.1.) По
своей функции TTT  очень  напоминает  оператор  IN#  базовых  словарей
некоторых версий Форта.

   Возможно и  другое  решение  данной  задачи  с неявным обращением к
оператору NUMBER:

   13 CONSTANT DOZEN

   : TTT ." ENTER>" QUERY    ( как в предшествующем описании)
	 INTERPRET            ( преобразование и распечатка )
         0 TIB @ ! 0 IN ! ;        ( очистка входного буфера)

   (Разумеется, распечатка   не   обязательна,   она    введена    для
наглядности,  для тех,  кто изучает Форт за терминалом.) Преимуществом
этого варианта является возможность ввода не  только  значения,  но  и
имени любой константы словаря, например:

                TTT <ВК>           TTT <ВК>

                ENTER> 66 <ВК>     ENTER> DOZEN
                ------             ------
                66 OK              13 OK
		-- --              -- --

   Здесь NUMBER  работает  внутри  INTERPRET,  но  обращение  к   нему
происходит  только  при  вводе  числа.  Необходимость очистки входного
буфера сопряжена с особенностями работы интерпретатора.

   Для внесения в описание слов  цифровых  констант  служат  операторы
LITERAL   и   DLITERAL,   которые  являются  операторами  немедленного
исполнения и работают исключительно  на  этапе  интерпретации.  Работу
оператора LITERAL поясним следующим описанием:

   : LITERAL STATE @ IF                  ( если интерпретация)
             COMPILE LIT          ( введение в описание слова
                               [CFA] системного оператора LIT)
	     , ( введение в описание слова значения константы)
             THEN ; IMMEDIATE

   Назначение DLITERAL  то  же,  что  и LITERAL,  но для чисел двойной
длины.  Операторы LITERAL и DLITERAL в сочетании с [ и ] могут  помочь
сделать  программу  более  читаемой.  В  программах  часто встречаются
арифметические выражения над константами, например:

                0 VARIABLE BB 1022 ALLOT
                3 CONSTANT AA
                : T*T 4 256 * 10 + AA / BB + + ;

   Выражение 4 256 * 10 + AA / будет  вычисляться  каждый  раз,  когда
происходит  обращение к T*T.  Разумеется,  программист может вычислить
это выражение с помощью калькулятора и подставить результат в описание
T*T.  Но  тогда не будет видно,  как получено это число.  Работу может
выполнить за вас ЭВМ, для этого достаточно записать:

      : T*T [ 4 256 * 10 + AA / ] LITERAL ВВ + + ;

и значение этого выражения будет компилировано в наше описание. Причем
по  месту  в  оперативной  памяти  и времени исполнения такой оператор
будет эквивалентен тому,  где было вычислено  и  подставлено  значение
выражения вручную. При использовании таких приемов нужно помнить, что,
если в процессе исполнения программы вы меняете значение константы AA,
в T*T будет использоваться то значение AA,  которое она имела в момент
интерпретации. Данную задачу можно решить также, введя константу CC:

      4 256 * 10 + AA 1 CONSTANT CC


	 SINGLE            &              DOUBLE

       /\___o                                          /---\____o
       \ ~ __>                                       /  \/ ~   /
       ┌┘ └─────┐/              ═══╕────────────────   /-----/
       │ NUMBER │                  │ N  U  M  B  E  R │
       └╥──────╥┘                  └──────────────────┘
				    // \\         // \\


которая описывается до T*T, а в самом T*T рассмотренное арифметическое
выражение заменяется именем константы CC.  Но,  если данная  константа
используется   только   один   раз,   такое  решение  нельзя  признать
оптимальным, ведь описание константы занимает в словаре даже при таком
коротком имени пять ячеек.

   Для повышения  точности  целочисленных  арифметических операций,  а
также для действий над числами с плавающей точкой в Форте используются
числа двойной длины.  Для работы с числами двойной длины предназначены
прежде  всего  операторы  2DROP,  2DUP,  2OVER  и  2SWAP,   являющиеся
аналогами операторов DROP, DUP, OVER и SWAP для чисел одинарной длины.
Числа двойной длины занимают две следующие друг за другом ячейки стека
или памяти. Причем "верхняя" содержит старшую часть числа и определяет
знак числа.  Оператор 2DROP удаляет два кода из стека,  2DUP  копирует
число  двойной  длины и записывает его в стек.  Надо сказать,  что эти
операторы,  да и 2SWAP и 2OVER  часто  используются  и  при  работе  с
числами одинарной длины.  Так,  вместо DROP DROP лучше написать 2DROP,
вместо OVER OVER - оператор 2DUP,  это и экономней по памяти и быстрее
при   исполнении.  Для  некоторых  арифметических  операций  требуется
преобразование  чисел  из  одного  формата  в   другой.   Если   число
положительное,  для  этого достаточно положить "поверх него" в стек 0,
для отрицательного -1  ('177777).  В  некоторых  версиях  эту  функцию
выполняет оператор S->D (табл.16).

Таблица 16. Операции над числами двойной длины
----------------------------------------------------------------------
Имя         Состояние           Версия          Функция
              стека
----------------------------------------------------------------------
D+        d1 d2 --> d1+d2       9, 3, F  Складывает два 32 - разрядных
                                         числа

D-        d1 d2 --> d1-d2       9, 3, F  Вычитает два 32 - разрядных
                                         числа


DMINUS    d --> -d              F        Меняет знак 32-разрядного
(DNEGATIVE)                     9, 3     числа

DABS      d --> |-d|            9, 3, F  Заменяет число  в  стеке  его
                                         модулем

DMIN      d1 d2 --> MIN         9, 3, F  Из двух 32-разрядных чисел  в
                                         стеке     оставляет    только
                                         минимальное

DMAX      d1 d2 --> MAX         9, 3, F  Из двух 32-разрядных чисел  в
                                         стеке     оставляет    только
                                         максимальное

D=        d1 d2 --> f           9, 3     f=TRUE, если d1 = d2

D0=       d --> f               9, 3     f=TRUE, если d = 0

D<        d1 d2                 9, 3     f=TRUE, если d1 < d2

DU<       ud1 ud2 --> f         9, 3     f=TRUE, если ud1 <  ud2.  Оба
                                         числа 32-разрядные без знака

S->D      n --> d               F        Преобразует      16-разрядное
                                         число     со     знаком     в
                                         32-разрядное число со знаком

2!        d адр --> -           9, 3     Записывает число      двойной
                                         длины по адресу "адр"

2@        адр --> d             9, 3     Записывает в    стек    число
                                         двойной длины, находящееся по
                                         адресу "адр"

2ROT      d1 d2 d3 --> d2 d3 d1 9, 3     Эквивалент ROT   для    чисел
                                         двойной длины

П р и м е ч а н и е . см. примечание к табл.15.
----------------------------------------------------------------------

   Для работы   с   числами   двойной   длины  без  знака  (U*  ,  U/)
предназначены и операторы M* M/,  M/MOD. Оператор М* перемножает числа
одинарной  длины,  но  результат  выдает в виде числа двойной длины со
знаком,  оператор М/ делит число двойной  длины  на  одинарное  число,
результатом  является  также  число  одинарной длины со знаком,  M/MOD
делит двойное число на одинарное,  в результате получается  остаток  и
частное  двойной  длины  (последнее  на  верху стека).  Для сложения и
вычитания чисел двойной длины используются операторы D+ и D-. При этом
стек  в  исходном  состоянии  должен содержать четыре кода - два числа
двойной длины,  после операции там остается два кода результата - одно
число двойной длины.

   Для печати  чисел двойной длины предусмотрен оператор D.R,  который
отображает 32-разрядное число со  знаком,  помещая  младшую  цифру  на
правый край выделенного для этого поля. Обращение к нему: d L D.R, d -
число двойной длины в стеке; L - число знакомест на экране, выделенное
для отображения числа.

   Оператор 2!  предполагает,  что  в  стеке число двойной длины (d) и
адрес (адр),  записывает число d в две смежные ячейки с адресами адр и
адр+2.

   Оператор 2@  предполагает  наличие  в  стеке  адреса,  в результате
значение адреса удаляется,  а в стек записывается число двойной длины,
находящееся  по  этому адресу.  Старшая его часть оказывается на верху
стека.

   Работу с числами двойной длины трудно  организовать,  не  используя
для  их  промежуточного хранения стек возвратов.  Для реализации таких
процедур введены операторы 2>R,  2R> и 2R,  которые являются аналогами
>R, R> и R, но оперируют с числами двойной длины.
