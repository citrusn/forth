                      Глава 6. СЛОВАРЬ ФОРТА

                      6.1. СТРУКТУРА СЛОВАРЯ


   Словарь Форта     состоит    из    некоторого    числа    первичных
определений-примитивов,  написанных на Ассемблере,  системного  набора
слов-определений,  имеющих структуру Форта,  загружаемых пользователем
системных библиотек (редактор. Форт-ассемблер, библиотека для работы с
числами   с   плавающей   точкой  и  т.д.)  и  собственно  определений
пользователя. Все эти слова образуют единый словарь.

   Описание слова DE в словаре  представлено  на  рис.4.  Первый  байт
описания  содержит  число  символов  в имени слова.  Старший бит (7-й)
этого байта равен 1,  а 6-й бит  может  указывать,  что  данное  слово
должно  исполняться  на  этапе  компиляции.  Ограничение максимального
числа байтов в имени в разных версиях Форта различно. Теоретически оно
равно  32  (5 бит).  В FIG-FORTH это число можно задавать,  присваивая
определенное  значение   системной   переменной   WIDTH.   Практически
12<=WIDTH=>32.  Старший  (7-й) бит последнего байта имени всегда равен
1.  Установка старшего  бита  первого  и  последнего  байтов  имени  в
единичное  состояние  носит  вспомогательный  характер  и  служит  для
облегчения поиска первого и  последнего  байтов  имени  (см.  описания
операторов NFA и PFA).

         D   E
  ┌────┬───┬───┬─────┬─────┬─────────┬───┬────────┬───────┬─────────┐
  │ 202│104│305│ LINK│ $COL│ CFA(LIT)│ 5 │ CFA(2) │ CFA(*)│ CFA (;S)│
  ├────┴───┴───┼─────┼─────┼─────────┴───┴────────┴───────┴─────────┤
  │<───-Имя──->│ LFA │ CFA │<──────────────- PFA ──────────────────>│

                Рис. 4. Структура описания слова DE


                             ┌───>─────────────────────────┐
 ┌─────────────────────────┬─┼────────┬────────────────────┼────────┐
 │                         │ └───<──- │   ┌───────<────────┘        │
 │ Базовый словарь         │  EDITOR  │   │  Форт-слова, введенные  │
 │ <─────────────┐         │          │   │     после EDITOR        │
 └───────────────┼─────────┴──────────┴───┼─────────────────────────┘
                 └────────────<───────────┘                      /\
   		                   /\                            ||
                                   ||                         CONTEXT
      		                CONTEXT         при FORTH DEFINITIONS
			 при FORTH DEFINITIONS

Рис. 5. Маршрут поиска слова при наличии контекстного словаря EDITOR

   Имя используется  интерпретатором  для  распознавания,  имеется  ли
требуемое  слово  в словаре.  В начале формирования имени нового слова
первый его байт имеет вид '240 N XOR,  где N - число букв в имени. Это
препятствует распознаванию слова,  описание которого еще не завершено.
Оператор ";" сбрасывает 5-й бит первого байта  описания  и  тем  самым
делает   данное   слово  полноправным  членом  текущего  словаря.  Для
выполнения этой операции используется оператор SMUDGE (SMUG):

      : SMUDGE LATEST BL TOGGLE ;

   (Функция оператора TOGGLE описана в гл.7.)

   После имени следует поле связи LFA,  которое содержит адрес  начала
описания  предшествующего  слова  (адрес  первого байта имени).  Схема
адресной связи (рис.5) (в описании  первого  слова  поле  содержит  0)
определяет  и  направление  поиска слов при компиляции и исполнении от
конца к началу.  Сразу после поля связи в описании слова следует адрес
программы,  которой  должно  быть  передано  управление при исполнении
данного слова, - поле CFA. Так, если это слово - константа, управление
будет передано программе,  которая перешлет число, расположенное сразу
после поля CFA,  в стек параметров.  Вслед за адресом  программы  идет
поле  параметров  PFA.  В  описаниях константы или переменной это поле
состоит только из одной ячейки.  Для массивов  размер  поля  ограничен
только наличием свободной оперативной памяти. В случае же стандартного
определения  типа  двоеточия  длина  этого  поля  зависит   от   числа
операторов,  составляющих  программу.  При исполнении слова адрес поля
CFA  (в  некоторых   версиях   PFA)   передается   оператору   EXECUTE
(исполнить).  Поле  параметров  определения  типа  двоеточия  содержит
адреса полей CFA слов,  которые определены ранее  и  входят  в  состав
данного определения.

   Пусть мы имеем описание слова с именем DE:

      : DE 5 2 *;

(рис.4). Оператор  ";"  в  конце  описания  преобразуется  в адрес CFA
оператора ;S,  который осуществляет возврат  к  исполнению  программы,
откуда  произошло обращение к данному слову;  5 будет интерпретировано
как последовательность кодов: CFA слова LIT и собственно числа 5.

   При передаче управления какому-либо слову адрес следующего за ним в
списке  (PFA)  слова  записывается  в  стек  возвратов.  По завершении
исполнения этот адрес извлекается оттуда и  засылается  в  программный
счетчик.  Так начинается исполнение следующего слова.  Как поступать с
кодами в поле параметров, определяется адресом программы, записанным в
поле  CFA.  В  приведенном  выше  примере  при  обращении  к  слову  2
управление  передается  системной  программе  DOCON  ($CON),   которая
запишет в стек параметров число первого слова поля параметров описания
константы 2.

   Аналогичную работу выполняет оператор LIT, только число извлекается
из  ячейки,  следующей  за  кодом  ссылки  на  LIT  (т.е.  из текущего
описания),  содержимое программного  счетчика  изменяется  так,  чтобы
управление передавалось слову,  поле CFA которого находится через одно
по  отношению  к  LIT.  В  приведенном   примере   управление   должно
передаваться не 5,  а программе "константа 2".  Так,  образ слова DE в
словаре будет иметь вид, приведенный на рис.4. Все числа восьмеричные.
CFA(2)  означает,  что в ячейке лежит CFA описания системной константы
2.  CFA(...) - это CFA оператора,  имя которого указано в скобках. При
исполнении  очередного  слова его CFA записывается в стек,  откуда оно
извлекается оператором  EXECUTE,  который  и  осуществляет  исполнение
программы.

   Не все  слова  при начале и завершении своей работы используют стек
возвратов.  Примитивы Форта его не  используют.  Это  важно,  если  вы
начнете   использовать   стек   возвратов   для  управления  процессом
исполнения программы.

   Примитивы (а также операторы Форт-ассемблера) содержат в  поле  CFA
адрес следующего за ним слова (PFA).  На месте поля PFA в таких словах
расположена программа,  написанная  на  Ассемблере  (т.е.  в  машинных
кодах).  Описание  слова Форта может содержать ссылки на примитивы или
на другие слова Форта.  При исполнении программы  фактически  работают
только    примитивы,    остальное    нужно    лишь    для   управления
последовательностью их выполнения.

   При обращении к слову интерпретатор (версия FIG-FORTH) записывает в
стек адрес поля PFA этого слова.  Создавая описания слов, работающих с
различными полями других слов, бывает нужно вычислить адреса любого из
полей описания (NFA,  LFA,  CFA и PFA). Проще определить поле команды.
Здесь и далее,  если не оговорено  обратное,  подразумевается,  что  в
исходном  состоянии  в  стеке  находится  адрес  поля  PFA.  Поле  CFA
расположено  перед  PFA,  и  для  вычисления  его  адреса   достаточно
выполнить команду 2-. Для этой цели в базовом словаре имеется оператор
CFA.  Весьма схож с ним оператор LFA, который выдает в стек адрес поля
связи.  Это  поле,  как  видно  из  рис.4,  находится перед полем CFA,
поэтому оператор LFA можно описать как :  LFA 4 - ;.  В других версиях
Форта  для этих же целей используются операторы LINK>,  >BODY,  >LINK,
>NAME, BODY> (табл.13) соответственно.

Таблица 13. Операции над полями описаний в словаре
----------------------------------------------------------------------
Имя       Состояние стека   Версия          Функция
----------------------------------------------------------------------
CFA       адр1 --> адр2       F       адр1 - поле PFA, адр2 - поле
				      CFA (адрес того же слова)
LFA       адр1 --> адр2       F       адр1 - поле PFA, адр2 - поле
                                      LFA того же слова.
                                      Эквивалент 4-
LINK>     адр1 --> адр2       3       адр1 - поле LFA, адр2 - поле
				      CFA
NFA       адр1 --> адр2       F       адр1 - поле PFA, адр2 - поле
				      NFA того же слова
PFA       адр1 --> адр2       F       адр1 - поле NFA, адр2 - поле
				      PFA того же слова
>BODY     адр1 --> адр2       3       адр1 - поле CFA, адр2 - поле
				      PFA того же слова
>LINK     адр1 --> адр2       3       адр1 - поле CFA, адр2 - поле
				      LFA того же слова
>NAME     адр1 --> адр2       3       адр1 - поле CFA, адр2 - поле
				      NFA того же слова
BODY>     адр1 --> адр2       3       адр1 - поле PFA, адр2 - поле
				      CFA того же слова
TRAVERSE  адр1 n --> адр2     F, MV   Ищет адрес противоположного
                                      края имени (NFA) в словаре
                                      начиная с адр1. Если n=1,
                                      поиск осуществляется в прямом
                                      направлении (т.е. в сторону
                                      больших адресов),
                                      если n=-1 (или 0), направление
                                      поиска меняется на
                                      противоположное. Адрес
                                      найденного байта адр2
                                      записывается в стек

П р и м е а н и е . F - FIG-FORTH, 3 - стандарт Форт-83,
                    MV - MVPFORTH.
----------------------------------------------------------------------

   Переход от адреса поля PFA к адресу начала поля имени (NFA) того же
слова выполняется оператором NFA:  сначала вычисляет адрес  последнего
байта имени (PFA - 5),  а затем сканирует имя в направлении его начала
и ищет байт с единицей в старшем бите. Обратное преобразование (NFA ->
PFA) производится в обратном порядке - имя просматривается от начала к
концу и ищется байт с единицей в старшем бите (отрицательный байт),  к
адресу  последнего  байта  имени добавляется 5 и получается адрес поля
PFA.  Теперь читателю ясно,  с какой целью первый  и  последний  байты
имени имеют отрицательный знак (1 в старшем бите).



                       6.2. ПОИСК В СЛОВАРЕ

   Команда 'XXXX   немедленного   исполнения.   XXXX   -   имя  слова,
содержащегося  в  словаре,  пробел  между  '   (апострофом)   и   XXXX
обязателен.

      : ' -FIND 0= 0 ?ERROR ( если XXXX не найдено, то сообщение
                              об ошибке)
                DROP LITERAL ; IMMEDIATE

   Оператор '  ищет  слово  с  именем  XXXX (из входного или экранного
буфера) в словаре Форта.  Если поиск  увенчался  успехом,  адрес  поля
параметров XXXX (PFA(XXXX)) будет записан в стек. При неудачном поиске
выдается сообщение об  ошибке.  Оператор  '  удобен,  если  необходимо
проверить, имеется то или иное слово в данный момент в словаре.

   При наличии  повторных  описаний  (два или более слов с идентичными
именами) по значению PFA в стеке можно разобраться,  какая  из  версий
слов сейчас доступна. Если апостроф встречается в описании какого-либо
слова,  то в  силу  того,  что  он  является  оператором  немедленного
исполнения,  при  компиляции  в  стек  будет  записано поле PFA слова,
следующего за ним.  Например,  мы хотим выяснить,  с  каким  словом  в
словаре связано слово с именем YYY. Для этого опишем слово NEXT-NAME:

      : NEXT-NAME ' LFA @ DUP @ '77 AND SWAP 1+ SWAP TYPE ;

   (Апостроф в  комбинации '77 указывает на 8-ричную систему счисления
(нет пробела).  Если вы полагаете,  что при  обращении  NEXT-NAME  YYY
будет напечатано имя слова,  предшествующего YYY,  то это заблуждение,
так как не учтена  немедленность  исполнения  апострофа.  Поэтому  при
исполнении  этого оператора в стек будет записано PFA слова LFA,  а не
YYY.  Чтобы все работало так, как запланировано, необходимо переписать
определение слова NEXT-NAME:

      : NEXT-NAME [COMPILE] ' LFA @ DUP @ '77 AND SWAP 1+ SWAP TYPE ;

   Еще одно  применение  апострофа - это изменение значения константы,
например

      200 CONSTANT SALARY
      .................
      500 ' SALARY !

по команде ' SALARY выдает в  стек  адрес  поля  PFA  этой  константы.
Последняя строка приведенного выше примера решает все проблемы.  Новое
значение константы будет равно 500.

   Любопытно, что в случае VARIABLE VVV  последовательность  '  VVV  и
просто  VVV  дают  идентичные  результаты  -  записывают  в  стек  PFA
переменной VVV.

   Есть и еще один вариант применения апострофа.  Пусть имеется  слово
HURA, опишем также переменную POINTER:

                  : HURA ." HURA" ;
		  .................
                  0 VARIABLE POINTER
                  Последовательность команд:
                  ' HURA CFA POINTER !
                  ...................
		  POINTER @ EXECUTE

позволяет исполнить   оператор   HURA.   Конечно,  столь  замысловатая
процедура может вызвать недоумение, ведь оператор HURA можно выполнить
и  непосредственно.  Но  в  предложенном  способе  исполнения  имеются
скрытые  возможности.  Например,  введем  описания  слов  A,  MORNING,
EVENING и GREETING:

                  : MORNING ." ОЕ УТРО" ;
                  : EVENING ." ЫЙ ВЕЧЕР !" ;
                  0 VARIABLE A
                  : GREETING ." ДОБР" A @ EXECUTE ;

и представим себе программу, которая имеет две ветви:

              .............................
	       |                         |
	       v                         v
        ' MORNING CFA A !     ' EVENING CFA A !
              .............................
	       |			 |
               ----->   GREETING   <------

   В результате  оператор  GREETING  отпечатает  "ДОБРОЕ  УТРО",   или
"ДОБРЫЙ  ВЕЧЕР"  в  зависимости от того,  по левой или по правой ветви
"прошла" программа.

   Как уже было показано,  словарь Форт имеет цепочную структуру. Поле
связи  (LFA)  слова  n  указывает  на начало описания (NFA) слова n-1.
Слово  с  n=1  имеет  0  в  поле  LFA.  Если  слово   найдено,   поиск
прекращается.  Именно это свойство позволяет иметь в словаре несколько
слов с идентичными именами. Например:

                   : A ." AAA" ;
                   : B A A ;
                   : A  B B ;

   После загрузки такой программы в словаре будет два слова с  именами
A.  Из  них  доступными  для непосредственного исполнения будет только
последнее, которое печатает 12 букв A. Слово B печатает 6 букв A, т.е.
использует  первое  из двух описаний слова A.  Команда FORGET A уберет
последнее слово A, и первое описание A снова будет активным.

   Поиск слова в словаре выполняет оператор -FIND

   : -FIND BL WORD      ( чтение слова из входного или экранного
                          буфера в зависимости от значения BLK и
                          запись его, начиная с адреса HERE)
	   HERE COUNT   ( запись в стек адреса (HERE+1) - начала
                          выделенного слова, и HERE C@, равного
                          числу символов в этом слове)
	   HERE CONTEXT @ @ (подготовка параметров для поиска.
			    Поиск начнется со слова, на которое
                         указывает системная переменная CONTEXT)
           (FIND)                              (оператор поиска)
           -DUP 0=      (поиск в контекстном словаре неудачен ?)
           IF       (если да, повторяем поиск в текущем словаре)
	     HERE CURRENT @ @ (FIND)
           THEN ;

                              ┌──────────┐
                              │DICTIONARY│
                              └──────────┘

	               ──>───┐┌──>──┐┌──>──┐┌─────>─────┐
	    CONTEXT @ @    ┌───┐  ┌───┐  ┌─────┐       ┌─┐
	    ВХОД ═>        │ONE│  │TWO│  │THREE│       │0│
	                   └───┘  └───┘  └─────┘       └─┘


   Из описания  видно,  что  -FIND  осуществляет поиск в контекстном и
базовом (текущем) словарях. Для поиска в других словарях надо поменять
контекст (системная переменная CONTEXT). О том, как это делать, смотри
следующий раздел.



                   6.3. КОНТЕКСТНЫЕ СЛОВАРИ ФОРТА



   До сих пор речь шла о едином словаре Форта,  хотя уже упоминалось о
редакторах,  ассемблере  и  других  библиотеках.  Часто эти библиотеки
образуют свои словари,  связанные друг с другом и базовым словарем  по
определенным правилам.  Базовый словарь имеет имя FORTH.  Для создания
нового словаря существует специальный оператор  VOCABULARY  (табл.14).
Если вы хотите создать словарь,  скажем с названием EDITOR,  вы пишите
VOCABULARY EDITOR, и он к вашим услугам.

Таблица 14. Управляющие операторы
----------------------------------------------------------------------
Имя           Состояние     Версия          Функция
	      стека
----------------------------------------------------------------------
FORTH          - --> -      9, 3, F    Делает словарь Форт контекстным
	       (I)
EDITOR         - --> -      9, 3, F    Делает словарь EDITOR
               (I)                     контекстным

ASSEMBLER      - --> -      9A, 3A,    Делает словарь ASSEMBLER
	       (I)          FA         контекстным

VOCABULARY     - --> -      9, 3, F    Слово-описатель, которое
                                       создает новый словарь.
                                       Обращение: VOCABULARY <name>,
                                       <name> - имя нового словаря

DEFINITIONS    - --> -      9, 3, F    Контекстный словарь
                                       становится текущим, все
                                       последующие описания связаны с
                                       этим словарем

QUIT           - --> -      9, 3, F    Очищает оба стека и возвращает
                                       управление терминалу. Не
                                       выдается никаких сообщений

ABORT          - --> -      9, 3, F    Прерывает исполнение, делает
                                       словарь Форт контекстным,
                                       выполняет QUIT. Распечатывает
                                       версию интерпретатора

ABORT"         f --> -      3          Отображает сообщение, если
               (I,C)                   f=TRUE. Обращение: : <name>..
                                       ABORT" ccc" ; где ccc - текст
                                       сообщения; " - сепаратор
                                       сообщения

' (апостроф)   - --> адр    F          Ищет слово XXX в словаре и
XXX            (I)                     записывает в стек его PFA (CFA)

(XXX)          - --> -      9, 3, F    Последовательность XXX
               (I)                     игнорируется. ")" выполняет
                                       роль разграничителя.
                                       Используется для комментариев

.(             - --> -      3          Немедленно отображает на
               (I)                     экране последовательность
                                       символов, расположенную
                                       между ".(" и ")". ")", является
                                       разграничителем

[,]            - --> адр    3          Определяет и компилирует
               (I,C)                   CFA слова в описании,
				       начинающемся с ":"

\              - --> -      MV         Заставляет Форт-интерпретатор
                                       игнорировать при загрузке
                                       экрана оставшуюся часть
                                       строки, ее можно использовать
                                       для комментариев

Примечание. I - слово немедленного исполнения, 9 - стандарт Форт-79,
            3A - ассемблер Форт-83, 9A - ассемблер Форт-79,
            C - используется только при компиляции.
----------------------------------------------------------------------

   Словарь создан, но он пока пуст. Далее вы пишите EDITOR DEFINITIONS
и  вслед  за этим вводите или загружаете какое-то количество описаний.
Все они войдут в созданный вами словарь. Это будет продолжаться до тех
пор,  пока  вы  будете  работать  или  пока  не  дадите  команду FORTH
DEFINITIONS (или ASSEMBLER DEFINITIONS и т.д.).  Пребывание в том  или
ином  словаре  контролируется системной переменной CONTEXT,  в которой
хранится  ссылка  на  адрес  последнего  слова,  описанного  в  данном
(контекстном) словаре.

                      ┌───────┐     ┌────────┐
                      │ FORTH │     │ EDITOR │
                      │-------│     │--------│             ссылка на
                      │  CFA  │     │  CFA   │  ┌──────<────-  VOCAB
                      │-------│     │--------│  │
                      │  PFA  │     │  PFA   ├──┘  ┌───<──── '120201
                      │-------│     │--------│     │
   CURRENT ─────>─┐   │ PFA+2 │     │ PFA+2  ├─────┘ ┌-<─────CONTEXT
                  │   │-------│     │--------│       │ ┌────────────┐
  ┌────────────┐  └───┤ PFA+4 │     │ PFA+4  ├───────┘ │    NFA     │
  │    NFA     │───<──┤       │     │        ├─────>───┤ последнего │
  │ последнего │      │-------│     │--------│         │   слова    │
  │   слова    │      │ PFA+6 ├──<──┤ PFA+6  │         └────────────┘
  └────────────┘      └───────┘     └────────┘

            Рис. 6. Структура связей в словарях Форта

   При интерпретации  или  выдаче  команд  поиск  слова  начинается  с
контекстного  словаря,  а  затем  при  неудаче  повторяется  в базовом
словаре.  Таким образом,  если в контекстном словаре имеется  слово  с
именем,  идентичным  имени  в  базовом  словаре,  то  будет  найдено и
использовано слово из контекстного словаря. Понятно, что после команды
FORTH DEFINITIONS "старый" контекстный словарь станет недоступным, так
как поиск начнется с последнего  Форт-слова  и  обойдет  весь  словарь
EDITOR  (рис.6).  Причудливый  маршрут  поиска,  отмеченный стрелками,
задается адресами поля связи LFA  (рис.5).  Чтобы  получить  доступ  к
словарю EDITOR, надо дать команду EDITOR DEFINITIONS.

   Оператор VOCABULARY имеет следующий алгоритм:

   : VOCABULARY <BUILDS  ( Формирование нового имени в словаре)
		'120201 ,          (имитатор заголовка [PFA+2])
                CURRENT @ CFA , ( ссылка на последнее описанное
				  слово)
		HERE VOC-LINK @ ,          ( ссылка на словарь-
					      "прародитель")
		VOC-LINK !     ( коррекция переменной VOC-LINK)
		DOES>          ( запись PFA словаря в стек при
                                 исполнении)
                2+ CONTEXT ! ; ( CONTEXT указывает на выбранный
                                 словарь)

   CURRENT - системная переменная, хранящая ссылку на последнее слово,
описанное в текущем словаре.  Имитатор  заголовка  представляет  собой
заголовок  слова,  имя  которого - код пробела.  Код в поле LFA всегда
указывает на начало заголовка предшествующего слова.

   Первое слово вновь образованного словаря (например,  EDITOR) всегда
указывает    на    имитатор    заголовка    ('120201)    в    описании
словаря-"прародителя"  (в  нашем  примере  FORTH).   Такая   схема   и
обеспечивает  указанный  выше  порядок  поиска,  так  как  слово после
имитатора будет рассматриваться как адрес поля связи.

   Если выдадим команду EDITOR,  то в стеке окажется PFA этого слова и
CONTEXT  @  будет  указывать  на последнее описание из словаря EDITOR.
Слово  DEFINITIONS  (описания)  просто  присваивает  значение  CONTEXT
переменной CURRENT и данный контекст становится текущим (резидентным).
Если этого не сделать,  то первый же оператор  ":"  поменяет  значение
CONTEXT  и  сделает  его равным CURRENT.  В обычных условиях CURRENT @
равен CONTEXT @.

   Упражнение 1.
   Определите с  помощью  оператора  ' (апостроф),  имеется ли в вашей
версии слово VLIST или WORDS?

   Упражнение 2.
   Проанализируйте структуру  вашего  словаря.  Для  этого используйте
оператор DUMP.

