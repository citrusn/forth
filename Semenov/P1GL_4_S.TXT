                 Глава 4. РЕДАКТОРЫ СИСТЕМЫ ФОРТ


   Тексты программ,   как   правило,  хранятся  в  виртуальных  файлах
(например,  FORTH.DAT),  которые разбиты на  секции  по  1024  байт  -
экраны.  В экране 16 строк,  в каждой по 64 символа (включая пробелы).
Чистый  экран  заполнен  пробелами.  Размещение   текста   на   экране
произвольное,  но  для  облегчения  читаемости  рекомендуется начинать
описание нового оператора с новой строки. Перенос описания с экрана на
экран  нежелателен  (это ограничение можно обойти,  например с помощью
оператора -->).  Слова, входящие в это описание, могут быть описаны на
других  экранах.  К  моменту начала загрузки данного экрана эти экраны
должны быть уже загружены.

   Разбиение экрана на 16 строк условно.  Фактически экран - это  одна
строка  длиной  в  1024 символа.  Поэтому никаких символов перехода на
новую строку или возврата  каретки  в  текст  экрана  не  вносится.  В
некоторых версиях Форта допустимы коды переноса и возврата каретки.  В
этом случае редактирование выполняется обычными системными редакторами
К 52 NE, ME или EDT.

   Если вы  записали  на  строке  только  один  символ,  остальные 63,
заполненные пробелами,  не используются. Это подталкивает программиста
на  более  полное  заполнение  строк.  Но  при  этом  текст  программы
становится плохо читаемым (трудно,  например,  визуально найти  начало
описания  конкретного  слова).  Целесообразнее  свободную часть строки
заполнять комментарием.  Полезно также иметь в  виду,  что,  если  имя
слова  в  описании  кончается  на 64-м байте строки,  новое имя должно
начинаться со 2-го байта следующей, иначе эти имена просто сольются.

   Отмеченные ограничения  в  силу  структурных   особенностей   Форта
несущественны - редко описание слова занимает более 3-6 строк. если же
программисту  надо  описать  более  сложное  слово,  ему  следует  или
выделить  в  нем определенные функциональные части и описать их в виде
отдельных слов,  или разбить данное "длинное" описание на  части.  Это
обычно упрощает и отладку программы.  Позднее,  по завершении отладки,
можно,  чтобы сэкономить место на диске и память, снова их объединить.
Длинные описания противоречат стилю Форта, и их следует избегать.



                 4.1. СТРОЧНЫЙ РЕДАКТОР EDIT


   Простейшим Форт-редактором является строчный редактор EDIT, который
не зависит от особенностей операционной системы и типа терминала.

   Чтобы начать редактирование, необходимо сначала загрузить редактор.
Редактор размещается на последовательности экранов (например,  начиная
с 50-го),  предшествующий экран загружает последующий. Если вы помните
это,  то можете дать команду 50 LOAD,  остальное сделает за  вас  ЭВМ.
Если  же  вы  не  хотите  держать  в  голове  номер  стартового экрана
редактора,  тем более что обстоятельства могут заставить вас поместить
его в другое место, можно использовать некоторый экран, например экран
3,  для записи программы загрузки  редактора.  Тогда  загрузка  экрана
будет  всегда  осуществляться  по команде 3 LOAD вне зависимости,  где
реально  размещен  редактор.  Для  большей  наглядности  можно  ввести
константу   3   CONSTANT  РЕДАКТОР,  описание  которой  разместить  на
стартовом экране,  а для  вызова  редактора  воспользоваться  командой
РЕДАКТОР LOAD.

   Чтобы приступить  к редактированию экрана N,  надо выдать команду N
EDIT <ВК>.  Текст редактора занимает пять  экранов.  Редактор  создает
свой словарь процедур, некоторые из них могут иметь имена, совпадающие
с  именами  базовых  или  загруженных  пользователем   слов.   Команды
редактора  выполняются  только  после  нажатия клавиши <ВК>.  Выход из
редактора EDIT осуществляется командой EX,  которая  производит  также
запись   на   диск   отредактированных   экранов.   Запись  происходит
автоматически при переходе от редактирования одного  к  редактированию
другого экрана.

   Выход из  системы  Форт  через  <CTRL C> (там,  где он разрешен) не
сохранит последний редактируемый экран (или группу экранов).

   Полный список команд редактора EDIT приведен в табл.9.

Таблица 9. Команды строчного редактора EDIT
----------------------------------------------------------------------
Имя        Состояние стека                Функция
----------------------------------------------------------------------
T          n --> -          Печатает текущую строку, помечая положение
			    курсора

I или      - --> -          Копирует во входной буфер
I XXX                       последовательность XXX, или таковая есть,
                            затем вводит его содержимое в текст сразу
                            после курсора

P или      - --> -          Копирует во входной буфер
P XXX                       последовательность XXX, если таковая есть,
P__                         затем вводит содержимое входного буфера в
                            текущую строку. Если число символов в
                            XXX больше 64, лишние отбрасываются

U          - --> -          То же, что и P, но входной буфер
U__                         загружается в строку, следующую за текущей
U XXX

F          - --> -          Копирует последовательность XXX, если она
F XXX                       есть, в буфер поиска, затем ищя такую
                            последовательность в пределах экрана.
                            Курсор ставится сразу после нее. На экране
                            появится строка, содержащая такую
                            последовательность

S          n --> -          То же, что и F, но поиск происходит вплоть
S XXX                       до экрана с номером n включительно

N          - --> -          Вызывает следующий экран для
                            редактирования, текущий экран сохраняется

В          - --> -          Вызывая предшествующий экран для
                            редактирования, текущий экран сохраняется

E          n --> -          Стирает символы, указанные в буфере
                            поиска (слева от курсора). Используется
                            после F.

D          - --> -          Копирует последовательность XXX, если она
D XXX                       есть, в буфер поиска, ищя ее в пределах
			    текущей строки и стирает

TILL       - --> -          Копирует последовательность XXX, если
TILL XXX		    она есть, в буфер поиска, затем стирая
                            все символы вплоть до XXX включительно

X          n --> -          Копирует текущую строку или строку n
                            во входной буфер, удаляя ее из текста,
                            остальные строки сдвигает

М          блок, стр --> -  Копирует текущую строку во входной
                            буфер, затем вводит содержимое входного
                            буфера в строку, следующую за указанной
                            "стр" в блоке с номером "блок"

R          - --> -          Комбинирует команды Е и I и замещает
RXXX                        найденную последовательность символов
                            последовательностью XXX, если она есть,
                            или содержимым входного буфера

L          - --> -          Выводит на терминал содержимое
			    редактируемого экрана

SAVE       - --> -          Копирует содержимое текущей строки во
			    входной буфер

EX         - --> -          Записывает отредактированный экран на
			    диск, осуществляя выход из редактора

J          n --> -          Сдвигает курсор на n символов. Направление
                            сдвига задается знаком числа n (плюс
                            означает сдвиг вправо)

NEWLI      - --> -          Раздвигает строки, освобождая строку,
                            следующую за текущей. Входной и поисковый
                            буферы остаются без изменений

TRADE      i k --> -        Меняя местами строки с номерами i и k
----------------------------------------------------------------------


                         Команды редактора

   L -  при  обращении  <L>  <ВК>  выдает на терминал содержимое всего
экрана вне зависимости от положения курсора (в редакторе  EDIT  курсор
"невидимый", локализовать его можно с помощью команды T); эквивалентна
N LIST, где N - номер редактируемого экрана.

   T - выводит на терминал строку,  на которую  указывает  курсор,  по
команде   n   T   курсор   перемещается  в  начало  строки  n,  и  она
распечатывается на терминале.

   I - вводит текст,  начиная с места, указанного курсором. Если число
введенных символов (М) больше 64-N, где N определяет положение курсора
в строке,  то M-64+N введенных символов будет потеряно. Таким образом,
I  производит  запись  только в одной строке.  Текст,  введенный после
команды   I,   запоминается   во   входном   буфере   (INBUF).    Если
последовательность  символов  XXX  отсутствует,  то,  начиная с места,
указанного курсором, вводится содержимое входного буфера. Старый текст
в строке правее курсора будет следовать за введенным текстом, если для
него в строке есть место.

   P -  также  служит  для   ввода   текста.   Если   за   Р   следует
последовательность  символов  XXX,  она  копируется  во входной буфер,
затем его содержимое вводится в текущую строку.  Если в строке уже был
текст,  то,  он  будет  стерт.  Команда P__ ( __ означает два пробела)
очищает текущую строку, заполняя ее пробелами. По команде P содержимое
буфера   вводится  в  текущую  строку,  старый  текст,  если  он  был,
стирается.

   U - аналог команды P,  но содержимое  входного  буфера  вводится  в
строку,  следующую  за  текущей.  Если номер текущей строки K,  то все
строки начиная с K+1 сдвигаются на одну,  содержимое 15-й  строки  при
этом теряется.

   X -  копирует  текущую  строку  во  входном  буфере,  удаляет ее из
текста, а остальные сдвигает, убирая образовавшийся "зазор".

   F - копирует последовательность  XXX,  если  она  введена  в  буфер
поиска,  затем  ищет  такую  последовательность в тексте экрана.  Если
последовательность найдена, курсор ставится сразу после нее, а строка,
содержащая искомую последовательность, отображается на терминале. Если
поиск неуспешен,  курсор ставится в начало текста экрана. По команде F
без  последующего  текста  XXX  производится  поиск последовательности
символов в буфере поиска.

   S -  аналог  команды  F,  но  поиск  проводит,  начиная  с   точки,
отмеченной курсором в текущем экране, вплоть до экрана с номером n-1.

   E - стирает символы,  указанные в буфере поиска (слева от курсора),
используется после команды F или S.

   D - копирует последовательность XXX,  если она  введена,  в  буфер,
ищет  ее  в пределах строки и стирает;  если последовательность XXX не
введена, из буфера поиска берется образец для сравнения.

   TILL или TILL XXX  -  копирует  последовательность  XXX,  если  она
введена,  в  буфер  поиска,  затем  стирает  все символы вплоть до XXX
включительно;  если XXX не  введена,  за  образец  берется  содержимое
буфера  поиска,  загруженное ранее.  Если поиск неудачен,  стирание не
производится.

   R или  R  XXX  -  комбинация  команд  Е  и  I,  замещает  найденную
последовательность строкой символов XXX, если она введена, в противном
случае для этого используется содержимое входного буфера.

   J - при обращении n J курсор смещается  на  n  позиций  вправо  или
влево  в  зависимости  от  знака  n;  если n не указано,  по умолчанию
считается n=1.

   NEWLI - раздвигает строки, освобождая строку, следующую за текущей,
входной и поисковые буферы остаются без изменений.

   М -  при  обращении  SCR  LINE М копирует текущую строку во входной
буфер,  после чего вводит содержимое входного буфера в текст экрана  с
номером  SCR  после  строки с номером LINE,  содержимое 15-й строки на
этом экране теряется.

   N - вызывает следующий экран  для  редактирования,  текст  текущего
экрана записывается на диск.

   В -  вызывает  для  редактирования  текст  предшествующего  экрана,
текущий экран сохраняется.

   TRADE - при обращении i k  TRADE  меняет  местами  строки  текущего
экрана с номерами i и k.

   EX - записывает отредактированный экран на диск, осуществляет выход
из редактора.

   WIPE - очищает текущий экран, заполняя его пробелами.

   FLUSH - сохраняет изменения,  внесенные в текст экрана,  без выхода
из редактора EDIT.

   Трудно представить  себе программиста,  который пользуется строчным
редактором,  когда  в  его  распоряжении  имеется  экранный  редактор.
Поэтому и перейдем к его описанию.  К сожалению,  экранный редактор по
своей природе зависим от  типа  операционной  системы  (BIOS)  и  типа
терминала.



                   4.2 ЭКРАННЫЙ РЕДАКТОР EDT


   Текст экранного   редактора   при   компактной   записи   полностью
помещается на четырех экранах [30].  Такая запись допустима только для
системных библиотек,  внесение изменений  в  которые  не  планируется.
Программа  экранного  редактора  для  ЭВМ  СМ1420  или-ДВК приведена в
приложении  1.  Предполагается,  что  клавиатура  терминала   снабжена
соответствующим набором вспомогательных клавиш (например, СМ7209). Для
облегчения  чтения  программа  записана  менее  компактно  и  снабжена
небольшими комментариями и пояснениями.  Когда редактор загружен,  для
начала редактирования экрана достаточно дать команду N EDT.  На экране
появится  текст с указанием номера экрана,  на левом поле - символы \,
отмечающие край строки.  Курсор  в  стартовом  состоянии  находится  в
верхней левой позиции (в этом можно убедиться визуально).  Теперь вы в
редакторе и можете вносить любые изменения в текст экрана.

   Перемещение курсора.
   Для перемещения  курсора  по  экрану  используется  вспомогательная
клавиатура терминала.  Так,  для перемещения  курсора  вверх  на  одну
строку служит клавиша </|\> или <F5> (процедура^), вниз на одну строку
- клавиша <\|/> или <F9>  (процедура  V),  соответственно  вправо  или
влево  - клавиши <<->(<F7>) и <->> (<F8>) (процедуры << и >>).  (Имена
клавиш, начинающиеся с буквы F, относятся к персональной ЭВМ IBM PC.)

   Если курсор находится где-то на верхней строке и вы нажали  клавишу
</|\>,  то  он  переместится  в  начальное  положение  (вверх  слева).
Аналогичное замечание  справедливо  для  клавиши  <\|/>,  если  курсор
находился на последней (15-й) строке, только в этом случае он окажется
в крайнем правом положении на 15-й строке.  После чего  клавиша  <\|/>
какого-либо воздействия на положение курсора оказывать не будет.

   Перемещение курсора  в начало следующей строки выполняется нажатием
клавиши <0> на дополнительной клавиатуре.  Причем  курсор  окажется  в
начале  строки n+1 или n-1 в зависимости от того,  какая из клавиш <4>
или <5> на вспомогательной клавиатуре  были  нажаты  до  этого.  Здесь
предполагалось,  что до нажатия клавиши <0> курсор находился на строке
n. Сразу после входа в редактор по умолчанию нажатой считается клавиша
<4>, и нажатие на <0> вызовет переход курсора в начало строки n+1.

   Аналогичную функцию  только  для концов строк выполняет клавиша <2>
вспомогательной клавиатуры (не путать с цифровыми  клавишами  основной
клавиатуры!).

   Перемещение курсора   в  конец  или  в  начало  экрана  выполняется
нажатием последовательно комбинаций двух клавиш ═╤═ и  <4>  (<GOLD>  и
<4>)  или  =  и <5> соответственно.  (Для персональной ЭВМ клавише ═╤═
соответствует клавиша <ESC> (в описаниях фирмы DEC (США)  это  клавиша
<GOLD>).)

   Перемещение курсора в начало следующего слова с учетом направления,
заданного клавишами <4> или <5> выполняется при  нажатии  клавиши  <1>
вспомогательной клавиатуры.

   Введение нового текста.
   Ввод символов в текст экрана производится нажатием клавиш  основной
клавиатуры, причем на место, указываемое курсором. Текст строки справа
от курсора смещается вправо,  а 64-й символ в  строке,  если  он  был,
безвозвратно теряется (перехода на следующую строку не происходит).

   Стирание элементов текста.
   Символ, на который указывает курсор,  стирается при нажатии клавиши
<6>(<F6>) вспомогательной клавиатуры (процедура DS).

   Символ слева от курсора стирается при нажатии клавиши <ЗБ> основной
клавиатуры (или <DEL>,  <RUBOUT>, <->>). Стертый символ записывается в
специальный буфер емкостью 1 байт.

   Слово справа  или  слева  от  курсора в зависимости от направления,
которое задается клавишами <4> или <5>,  стирается при нажатии клавиши
<9> (или <F4>).

   Часть или  вся  строка  справа  от  курсора  стирается  при нажатии
клавиши <DEL L> (или <F2>).  Если стирается вся строка,  текст  экрана
смещается  так,  что  освободившееся  место  заполняется  последующими
строками, при этом 15-я строка заполняется пробелами.

   При ошибочном  стирании  слова,  строки  или   символа   их   можно
восстановить, нажав последовательно клавиши <GOLD> <9>, <GOLD> <DEL L>
или <GOLD> <6> соответственно.  Стертые слова или строки, так же как и
последний из стертых символов,  запоминаются в буферах. Это может быть
использовано  для  копирования  слова  или  строки   (в   версии   для
персональной  ЭВМ  содержимое  этих  буферов постоянно отображается на
экране).  Для этого курсор перемещается  в  нужное  место,  нажимаются
клавиши  <GOLD>  и  <9>  (или <GOLD> и <DEL L>),  и слово (или строка)
будет введено в текст  экрана.  При  стирании  слова  или  перемещении
курсора в начало следующего слова пробелы перед словом игнорируются.

   Здесь уместно  напомнить,  что  текст экрана не содержит кодов <ВК>
(коды 15,  12), что послужило причиной введения ряда ограничений. Так,
ввод  символов  осуществляется  только  в  пределах  заданной  строки,
исключение  делается  лишь  для  процедуры  <GOLD>  <3>.  Переход   на
следующую  строку  возможен  при  нажатии  клавиши  <0>  (в  некоторых
реализациях и <ВК>), при этом часть слова может быть на предшествующей
строке,  а часть на следующей. Текст в буфере не имеет разграничителей
строк,  после 64-го байта следует текстовый символ 65-го. При переносе
слова надо следить,  чтобы в нем не возникло разрыва (пробела). Но при
вводе строки по команде <GOLD>  <DEL  L>  или  <GOLD>  <0>  (последняя
комбинация  служит  для  открытия  новой  строки)  последующие  строки
сдвигаются,  и 15-я  строка  безвозвратно  теряется  (нумерация  строк
начинается с 0).

   Операции с частями текста  на  экране.
   Строка справа  от  курсора  стирается  при  нажатии  клавиши  <ВК>.
Стертый  текст  с  предшествующей  строки  вводится  в  новую  строку.
Последующие строки сдвигаются, последняя строка экрана теряется. (Надо
сказать,  что нажатие <ВК> не вносит в текст никаких символов, видимых
или невидимых (это всего лишь команда редактору).) Обратная  процедура
осуществляется   нажатием   клавиш  <GOLD>  <ВК>  (<CR>).  Строка  n+1
стирается (на ее место вводится строка n+2 и т.д.),  и  ее  содержимое
записывается в строку n справа от курсора.  Часть,  не поместившаяся в
строке n, будет потеряна.

   Удаление и  введение   определенной   части   текста   может   быть
осуществлено  следующим  образом.  Сначала  курсор  ставится  в начало
выделяемой части,  при этом он указывает  на  первый  элемент  строки,
который  будет  удален.  Нажимается  клавиша  <,> (курсор 1 на рис.3).
Затем курсор перемещается к концу выделяемого текста и ставится  вслед
за  последним  элементом.  Нажимается клавиша <3> (курсор 2 на рис.3),
выделенный текст стирается с  экрана  и  записывается  в  буфер.  Если
стирание  произошло  ошибочно  или сама операция была нужна только для
записи  в  буфер,  нажимаются  клавиши  <GOLD>  <3>,  и  текст  экрана
восстанавливается  в  первоначальном  виде.  Теперь  можно переместить
курсор в нужное место, нажать <GOLD <3>, и текст, записанный в буфере,
будет внесен в указанное место на экране.

   Варианты, приведенные на рис.3, отражают специфику записи текста на
экране, где нет символов-разграничителей строк.

   При введении информации из буфера  последовательность  символов  на
строке,   куда  будет  внесен  заключительный  сегмент  текста,  будет
сдвинута вправо, и символы, не поместившиеся на этой строке, теряются.

   Строка J xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx До нажатия <ВК>
	                     /\
         		     || курсор
          J xxxxxxxxxxxxxxxxxxxxx            После нажатия <ВК>
        J+1 xxxxxxxxxxxxxx

            |<----------- a ---------->|<- c ->
   Строка J xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  До нажатия <3>
                                      /║\
                                       ║ курсор 1

        J+1 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

            |<--d-->|<----------b------------>|
        J+2 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                   /║\
                    ║ курсор 2

            |<----------- a ---------->|
   Строка J xxxxxxxxxxxxxxxxxxxxxxxxxxxx      После нажатия <3>
				      /║\
				       ║

            |<----------b---------->|
        J+1 xxxxxxxxxxxxxxxxxxxxxxxxx

      Рис. 3. Работа экранного буфера с сегментами текста

   Нажатие клавиш,  функции  которых  не  описаны,  вызовет   звуковой
сигнал,  но  никаких  воздействий  на  текст  или положение курсора не
произойдет.

   Поиск комбинации символов на экране.
   Нажатие клавиш   <GOLD>  <8>  (или  <ESC>  <8>)  вызовет  появление
сообщения MODEL: в верхней левой части экрана. Теперь можно напечатать
искомую  комбинацию  символов,  после  чего нажать клавишу <ВК>.  Если
поиск завершился успешно,  курсор будет  указывать  на  первый  символ
найденной  комбинации.  Если  поиск  неудачный,  курсор  останется  на
прежнем месте.

   Если вы  хотите  повторить  поиск  в  последующем  тексте,  нажмите
клавишу  <8>.  Для управления направлением поиска используются,  как и
раньше,  клавиши <4> и <5>.  Но если курсор находится в верхнем  левом
положении,  а направление задано клавишей <5> (реверсивное),  то поиск
проводиться  не  будет.  Такая  ситуация  возникает  при  переходе   к
редактированию  предшествующего  экрана  с помощью клавиши <7>.  То же
самое будет при положении  курсора  внизу  справа  и  направлении  <4>
(прямое).  Для  выполнения поиска на данном экране в такой "тупиковой"
ситуации смените направление поиска.

   Выполнение команд.
   Для выхода  из редактирования необходимо нажать клавиши <GOLD> <7>,
в верхней левой части экрана появится сообщение COMMAND. Для записи на
диск  отредактированного  экрана  печатаем  команду  EXIT  и  нажимаем
клавишу <ВК>.  Выход из редактора  без  сохранения  отредактированного
производится  по  команде  QUIT <ВК>.  В обоих случаях текст на экране
стирается.  В качестве команд могут быть использованы:  n EDT, которая
заставляет  редактор поставить для редактируемого экрана флаг UPDATE и
перейти  к  редактированию  экрана   n;   DECIMAL,   если   до   этого
использовалась восьмеричная система счисления, и т.д. К числу полезных
команд можно отнести  WIPE,  очищающую  весь  экран  (заполняющую  его
пробелами),  N  М  COPY,  копирующую  экран  N  на  экран М,  при этом
содержимое экрана М теряется,  и FLUSH,  сохраняющую содержимое экрана
на  диске  без  выхода  из  EDT.  Сигналом  начала  исполнения команды
является нажатие клавиши <ВК>.

   Вспомогательные команды.
   При нажатии клавиши <7> начинается редактирование следующего экрана
с учетом направления,  заданного  клавишами  <4>  или  <5>,  при  этом
содержимое текущего экрана сохраняется.  При ошибочном нажатии клавиши
<GOLD> для отмены его действия следует нажать клавишу <.>  (<,>).  При
любых  сбоях рекомендуется выполнить команду ^W (одновременное нажатие
клавиш <CTRL> и <W>).

   Редактор имеет буферы для хранения  слова  (64  байт),  строки  (64
байт)  и  выделенного текста (1024 байт).  В некоторых версиях имеется
буфер и для искомой строки символов.  Содержимое  их  сохраняется  при
переходе   к   редактированию   другого  экрана.  Это  свойство  можно
использовать для введения в  текст  редактируемого  экрана  фрагментов
предшествующего.  В  рассматриваемом редакторе в целях экономии модель
для поиска записывается в область  HERE.  При  переходе  к  следующему
экрану  с  помощью клавиши <7> эта область сохраняется,  что позволяет
осуществлять поиск в смежных экранах.  Однако если вы  воспользовались
COMMAND,  которая  "портит" область HERE,  дальнейший поиск становится
невозможным.  Вам  это  не  нравится?  В  приложении   имеется   текст
редактора, исправьте его.

   Теперь рассмотрим как устроен редактор.

   Различные дисплеи имеют разные протоколы управления.  Многие из них
контролируются    специальными    управляющими    последовательностями
символов,  которые  начинаются  с  кода  27  (ESC),  поэтому их иногда
называют ESC-последовательностями.  Далее предполагается, что терминал
типа СМ7209 или совместимый с ним по системе команд.  Позиционирование
в нем курсора выполняется последовательностью ESC Y а b, где ESC и Y -
восьмеричные коды 33 и 131,  а а и b - два числа, равные '40+x и '40+y
соответственно,  x и y - номера колонки и ряда,  где находится курсор,
причем при x=y=0 курсор фиксирован в верхнем левом углу. Для установки
курсора в нужное положение используется оператор FIX:

      : FIX 13 EMIT            ( сброс счетчика позиций в терминале)

            '54433 PAD !               ( запись в PAD кодов ESC и Y)
            PAD 2+ I       ( запись в PAD будущих координат курсора)
            PAD 4 TYPE ;            ( выдача ESC-последовательности)

   Обращение: N FIX,  где N - число,  старший байт  которого  является
кодом  колонки,  а  младший  - строки.  При передаче на терминал такой
ESC-последовательности на экране не отображается никаких  символов,  а
изменяется  только  положение  курсора.  Координата  курсора на экране
определяется переменной R#,  которая может принимать значения от 0  до
1023.  Причем для первой строки 0<=R#<=63,  для второй - 64<=R#<=127 и
т.д. Изменениями координат курсора управляет оператор +CUR:

      : +CUR R# @ + 0 MAX 1023 MIN R# ! ;

обращение к которому происходит согласно  схеме  K  +  CVR,  где  K  -
приращение переменной R#. Номер строки определяет слово L#:

      :L# R# @ 64 /;

а номер столбца - слово

      : C# R# @ 64 MOD

   После того как координата курсора определена и присвоена переменной
R#, курсор фиксируется в нужном положении оператором ON:

      : ON L# 36 + C# 35 + SWAP + FIX ;

   Теперь легко описать операторы перемещения курсора  вправо,  влево,
вверх и вниз:

      : >> 1 +CUR ;  ( вправо)       : << -1 +CUR ;   ( влево)
      : ^ -64 +CUR ; ( вверх)        : DWN 64 +CUR ;  ( вверх)

   Эта техника перемещения курсора пригодна не  только  для  экранного
редактора.  Ввод символа в позицию,  отмеченную курсором, производится
согласно следующему  алгоритму.  Сначала  все  символы  строки  правее
курсора  записываются  в  буфер  строки (процедура GAP).  Затем в стек
записывается адрес экранного буфера,  соответствующий позиции курсора,
а также код ASCII введенного символа. Курсор смещается на одну позицию
вправо, и содержимое строчного буфера укладывается в строку, начиная с
места,  указанного курсором (процедура PUT). Последний символ в строке
теряется.  После   завершения   операции   измененная   часть   строки
отображается   на  экране  (процедура  SHOW).  Описание  слова  записи
вводимого символа:

      : SS GAP CA          ( вычисление текущего адреса в экранном
            		     буфере)
               C! LE                  ( последний элемент строки ?)
               IF >> PUT THEN SHW ;

   При компактной  записи  он  занимает  восемь  блоков по 512 байт на
диске против 55 для  редактора  К52,  что  демонстрирует  компактность
записи программ на Форте.

   Запись текста без кодов <ВК>, <ПС> экономит два байта на каждые 64.
Для дисков малой емкости это может быть и оправдано.  В версиях Форта,
где  разрешены  символы  перехода на новую строку,  для редактирования
используются стандартные системные редакторы.  При этом взаимодействие
с  файловой  системой  должно  быть  очень гибким.  Такая версия Форта
должна позволять интерпретацию текстов в файлах и загрузку  в  словарь
так, как это производит FIG-FORTH для отдельных экранов или их групп.

   Особенностью варианта  экранного  редактора  для  персональной  ЭВМ
является то,  что процедуры очистки экрана (SCL) и фиксации  положения
курсора (FIX) содержатся в базовом словаре Форта.  Кроме того, функции
управляющих клавиш соответствуют системному редактору EDT персональной
ЭВМ.

   В заключение отметим некоторые недостатки данной версии редактора:

   отсутствие макроопределений типа LEARN (в К52),

   сложности при работе с произвольными виртуальными файлами,

   отсутствие возможности кратного исполнения команд.

   При экранной структуре файлов эти недостатки несущественны.

   При желании вы без большого труда сможете их устранить.



                   4.3. ПОСЛЕ РЕДАКТИРОВАНИЯ


   После того  как  текст  отредактирован  и  записан  на  диск  можно
осуществить  загрузку  операторов  в  словарь  Форта.  Если  требуемые
операторы размещены  на  экране  n,  следует  выдать  команду  n  LOAD
(загрузить). Часто программа состоит из большого числа слов и занимает
несколько экранов.  Тогда можно  воспользоваться  одной  из  следующих
возможностей:

   выдать команду  n1  LOAD n2 LOAD и т.д.,  где n1,  n2,...  - номера
нужных экранов;

   если экраны  расположены  подряд  (а  к  этому следует стремиться),
можно в конце текста описаний на  экране  n  поставить  оператор  -->,
который обеспечит загрузку экрана n+1;

   если экраны   размещены  произвольно,  в  конце  текста  на  экране
ставится команда k LOAD, где k - номер следующего экрана.

   Встречаются ситуации,  когда нежелательно вводить часть экрана. Эту
задачу также можно решить различными путями.

   а) Поместить  ненужную  часть  в скобки (XXXX),  после левой скобки
необходим пробел.  Этот способ хорош  при  условии  отсутствия  скобок
внутри "изолируемого" текста XXXX. Например:

      : --> ?LOAD 0 IN ! 1 BLK+! ;
      : U. О D. ;
      ( : S . DUP ;
      : TRIO 12 EMIT 3 OVER + SWAP DO I LIST LOOP ;)

   Последние две   строчки   воспринимаются   как   комментарий  и  не
загружаются.

   б) Если нужно исключить нижнюю часть экрана,  можно воспользоваться
оператором  -->  или  k  LOAD,  помещенным   перед   нежелательным для
загрузки текстом. Например:

                    : * M* DROP ;
                    : /MOD >R S->D R> М/ ;

-->  (или k LOAD)  и  последующие  строки  загружены  не  будут,  хотя
загрузка следующих экранов будет продолжена:

      : EMPTY-BUFFERS FIRST @ 3084 ERASE;
        (это слово загружено не будет)

   в) Если  нужно  убрать  ряд  заключительных  строк  на последнем из
загруженных экранов, можно перед ними ввести оператор ;S.

   Когда необходимо модифицировать  загружаемую  программу,  адаптируя
ее, например, к используемому типу терминала, можно определенные части
экрана загружать выборочно,  но при выполнении  определенного  условия
(условная  интерпретация).  Для  реализации  такой  возможности опишем
массив ENDC и слово IFF:

   '47105 VARIABLE ENDC '41504 ,
   : IFF                     ( оператор условной интерпретации)
	  IF BLK @ BLOCK 1K IN @ - 1- 0     ( вычисление числа
			    символов до конца экранного буфера)
             DO 4 0                               ( поиск ENDC)
                DO ENDC I + C@ OVER IN @ + I + C@ -
                   IF 0 LEAVE    ( ставим флаг FALSE, если это
				   не ENDC)
                   THEN
                LOOP -DUP 0=
                   IF I IN +!   ( коррекция указателя входного
				  буфера)
		   ELSE 10 IN +I LEAVE       ( если нашли ENDC)
                   THEN
             LOOP DROP
          THEN ;

   Теперь, если на каком-то экране записать:

			  0 CONSTANT CONDI
			  CONDI IFF
			  ." START" CR
			  ENDC DROP
			  ." FINISH"

   To загрузка такой программы даст отклик:

      START
      -----
      FINISH OK
      ---------

   Если же постоянной CONDI присвоить значение 1,  то на экране  будет
выведена только вторая строка (FINISH). Таким образом, программа между
IFF и ENDC будет загружаться только при условии  CONDI=0.  Приведенный
текст  IFF - хороший пример того,  как используется указатель входного
буфера IN.

   Если по вашему  мнению  редактор  не  имеет  некоторых  нужных  вам
процедур,  например  поиска  образа  в  пределах  нескольких  экранов,
копирование выделенных текстов (а не "вырезка"),  вы можете  устранить
этот недостаток.

   На отдельном экране с помощью редактора подготовьте описания нужных
слов.  Эти описания должны следовать после команды EDITOR DEFINITIONS,
что  обеспечит  включение  их  в  контекст  редактора.  В конце текста
следует написать FORTH DEFINITIONS,  чтобы вернуться к Форт-контексту.
Загрузив  эти  описания  при  загруженном  редакторе,  вы  сможете ими
воспользоваться (попытаться отладить) в режиме COMMAND (нажатие клавиш
GOLD  (клавиша ═╤═ на дисплее "Электроника ИЭ-15") <7> вспомогательной
клавиатуры).   Если   вы   допустили   ошибку   в   программе,   можно
отредактировать текст дополнительного экрана и повторно его загрузить.
Перед загрузкой необходимо выдать команду FORGET YYYYY,  где  YYYYY  -
имя первого слова на вашем дополнительном экране. В противном случае в
словаре  появятся  слова-дубликаты,  а  при  загрузке   будет   выдана
последовательность  сообщений  о  повторных  описаниях  слов.  С точки
зрения работоспособности программы это не имеет значения,  но  память,
выделенная под словарь,  небеспредельна, и при многократном повторении
процедуры загрузки этот лимит может быть исчерпан.

   Кроме названных  можно   ввести   команду,   подсчитывающую   число
обращений  к  тому  или  иному  оператору.  Результат  подсчета  может
выдаваться на  свободное  поле  вне  текста  экрана.  Такая  процедура
полезна для оптимизации программ.

   При желании  обращение  к  вновь  описанным  словам редактора может
происходить путем нажатия резервных командных клавиш или одновременным
нажатием  клавиш  <CTRL>  <SY>  ,  где  SY - клавиша,  соответствующая
выбранному  вами  символу.  Но  для  этого  требуется   редактирование
базового   текста   EDT.  Прежде  чем  начать  это  рискованное  дело,
запаситесь копией дискеты со "старым" текстом EDT;  в противном случае
при ошибке у вас не будет инструмента, чтобы ее исправить. Имея копию,
вы можете загрузить с нее редактор,  поместить на ее место  дискету  с
вашим редактором и продолжить работу над вашим вариантом.

   Не следует  путать  QUIT  из редактора и из базового словаря Форта.
Хотя их имена идентичны, функции абсолютно различны. Идентичность имен
приводит  к тому,  что при интерпретации EDT выдается предупреждение о
повторном описании слова. QUIT в редакторе EDT имеет вид

      : QUIT EMPTY-BUFFERS SCL ABORT ;

SCL стирает текст на экране; ABORT - команда базового словаря Форта:

   : ABORT SP!  ( установка указателя стека параметров в начальное
		  состояние)
	   DECIMAL        ( установка десятичной системы счисления)
           CR ." FORTH-PC IS HERE"        ( сообщение о готовности)
           FORTH DEFINITIONS     ( словарь Форт сделан контекстным)
           QUIT ;                       ( вход в QUIT-петлю )

которая обеспечивает  вход  в  QUIT,  используется  при  инициализации
системы,  обработке всевозможных ошибок и выходе системы из  нештатных
ситуаций.  Функция QUIT базового словаря фундаментальна - это основной
оператор Форта:

   : QUIT 0 BLK !                  ( переход в пультовой режим)
          [                      ( установка режима исполнения)
          BEGIN           ( начало бесконечного цикла ожидания)
          RP!        ( установка указателя возвратного стека в
		       начальное состояние)
	  CR QUERY    ( приглашение ввести команду с терминала)
          INTERPRET       ( интерпретация и исполнение команды)
          STATE @ 0= IF ." OK"     ( сообщение о благополучном
			      выполнении в режиме "исполнение")
                     THEN 0 (  засылка 0 для поддержания цикла)
          UNTIL ;

   В сущности,  пока Форт работает,  он исполняет команду QUIT. QUIT -
это резидентный монитор системы Форт (подробнее см. в гл.7 ч.II).

